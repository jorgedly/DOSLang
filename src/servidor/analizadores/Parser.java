
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Dec 01 11:27:48 CST 2019
//----------------------------------------------------

package servidor.analizadores;

import java.util.ArrayList;
import java_cup.runtime.Symbol;
import servidor.compilador.Constantes;
import servidor.compilador.Control;
import servidor.compilador.Ubicacion;
import servidor.compilador.expresion.Expresion;
import servidor.compilador.expresion.aritmetica.Division;
import servidor.compilador.expresion.aritmetica.Modulo;
import servidor.compilador.expresion.aritmetica.Multiplicacion;
import servidor.compilador.expresion.aritmetica.Potencia;
import servidor.compilador.expresion.aritmetica.Resta;
import servidor.compilador.expresion.aritmetica.Restau;
import servidor.compilador.expresion.aritmetica.Suma;
import servidor.compilador.expresion.logica.And;
import servidor.compilador.expresion.logica.Nand;
import servidor.compilador.expresion.logica.Nor;
import servidor.compilador.expresion.logica.Not;
import servidor.compilador.expresion.logica.Or;
import servidor.compilador.expresion.relacional.Distinto;
import servidor.compilador.expresion.relacional.Igual;
import servidor.compilador.expresion.relacional.RelacionalSimple;
import servidor.compilador.expresion.valor.Atomo;
import servidor.compilador.expresion.valor.acceso.Acceso;
import servidor.compilador.expresion.valor.acceso.AccesoArreglo;
import servidor.compilador.expresion.valor.acceso.Elemento;
import servidor.compilador.expresion.valor.acceso.Identificador;
import servidor.compilador.expresion.valor.acceso.Llamada;
import servidor.compilador.expresion.valor.nativas.NCharat;
import servidor.compilador.expresion.valor.nativas.NEquals;
import servidor.compilador.expresion.valor.nativas.NLength;
import servidor.compilador.expresion.valor.nativas.NMalloc;
import servidor.compilador.expresion.valor.nativas.NReplace;
import servidor.compilador.expresion.valor.nativas.NRound;
import servidor.compilador.expresion.valor.nativas.NSizeof;
import servidor.compilador.expresion.valor.nativas.NTochararray;
import servidor.compilador.expresion.valor.nativas.NTolowercase;
import servidor.compilador.expresion.valor.nativas.NTouppercase;
import servidor.compilador.expresion.valor.nativas.NTrunk;
import servidor.compilador.instruccion.Asignacion;
import servidor.compilador.instruccion.BloqueInstrucciones;
import servidor.compilador.instruccion.Break;
import servidor.compilador.instruccion.Case;
import servidor.compilador.instruccion.Continue;
import servidor.compilador.instruccion.Exit;
import servidor.compilador.instruccion.For;
import servidor.compilador.instruccion.If;
import servidor.compilador.instruccion.Instruccion;
import servidor.compilador.instruccion.InstruccionExpresion;
import servidor.compilador.instruccion.NFree;
import servidor.compilador.instruccion.Read;
import servidor.compilador.instruccion.Repeat;
import servidor.compilador.instruccion.Sif;
import servidor.compilador.instruccion.Switch;
import servidor.compilador.instruccion.While;
import servidor.compilador.instruccion.With;
import servidor.compilador.instruccion.Write;
import servidor.compilador.instruccion.WriteSimple;
import servidor.compilador.instruccion.Writeln;
import servidor.compilador.instruccion.tipo.PreCampo;
import servidor.compilador.instruccion.tipo.PreDimension;
import servidor.compilador.instruccion.tipo.PreDimension1;
import servidor.compilador.instruccion.tipo.PreDimension2;
import servidor.compilador.instruccion.tipo.PreArreglo;
import servidor.compilador.instruccion.tipo.PreEnumeracion;
import servidor.compilador.instruccion.tipo.PreTipo;
import servidor.compilador.instruccion.tipo.PrePrimitivo;
import servidor.compilador.instruccion.tipo.PreRango;
import servidor.compilador.instruccion.tipo.PreRecord;
import servidor.compilador.instruccion.tipo.PreTipoId;
import servidor.compilador.preanalisis.DeclaracionConstantes;
import servidor.compilador.preanalisis.DeclaracionConstantes1;
import servidor.compilador.preanalisis.DeclaracionConstantes2;
import servidor.compilador.preanalisis.DeclaracionTipo;
import servidor.compilador.preanalisis.DeclaracionTipo1;
import servidor.compilador.preanalisis.DeclaracionVariables;
import servidor.compilador.preanalisis.DeclaracionVariables1;
import servidor.compilador.preanalisis.DeclaracionVariables2;
import servidor.compilador.preanalisis.Id;
import servidor.compilador.preanalisis.PreFunction;
import servidor.compilador.preanalisis.PreParametro;
import servidor.compilador.preanalisis.PreProcedure;
import servidor.compilador.preanalisis.PreProgram;
import servidor.compilador.preanalisis.PreSubrutina;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Dec 01 11:27:48 CST 2019
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\253\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\014\000\002\005\005" +
    "\000\002\005\005\000\002\005\002\000\002\006\004\000" +
    "\002\006\005\000\002\006\002\000\002\007\004\000\002" +
    "\007\003\000\002\010\010\000\002\010\006\000\002\011" +
    "\004\000\002\011\005\000\002\011\002\000\002\012\004" +
    "\000\002\012\003\000\002\013\006\000\002\013\006\000" +
    "\002\014\004\000\002\014\005\000\002\014\002\000\002" +
    "\015\004\000\002\015\003\000\002\016\006\000\002\016" +
    "\010\000\002\017\003\000\002\017\002\000\002\020\004" +
    "\000\002\020\003\000\002\021\014\000\002\021\016\000" +
    "\002\021\004\000\002\022\005\000\002\022\004\000\002" +
    "\022\002\000\002\023\005\000\002\023\003\000\002\024" +
    "\005\000\002\024\006\000\002\025\005\000\002\026\004" +
    "\000\002\026\003\000\002\027\003\000\002\027\004\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\004\000\002\027\007\000\002\027\004\000\002" +
    "\030\006\000\002\031\010\000\002\032\004\000\002\033" +
    "\004\000\002\034\004\000\002\035\006\000\002\035\007" +
    "\000\002\035\011\000\002\035\010\000\002\036\007\000" +
    "\002\036\006\000\002\037\010\000\002\037\011\000\002" +
    "\040\004\000\002\040\003\000\002\041\005\000\002\042" +
    "\005\000\002\043\006\000\002\044\007\000\002\045\012" +
    "\000\002\045\012\000\002\046\005\000\002\047\005\000" +
    "\002\050\007\000\002\051\005\000\002\051\003\000\002" +
    "\052\005\000\002\052\005\000\002\052\005\000\002\052" +
    "\005\000\002\052\004\000\002\052\005\000\002\052\005" +
    "\000\002\052\005\000\002\052\005\000\002\052\005\000" +
    "\002\052\005\000\002\052\005\000\002\052\005\000\002" +
    "\052\005\000\002\052\005\000\002\052\005\000\002\052" +
    "\005\000\002\052\004\000\002\052\004\000\002\052\005" +
    "\000\002\052\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\055\006\000\002\055\006\000\002" +
    "\055\010\000\002\055\006\000\002\055\010\000\002\055" +
    "\006\000\002\055\006\000\002\055\006\000\002\055\010" +
    "\000\002\055\006\000\002\055\006\000\002\056\005\000" +
    "\002\056\004\000\002\057\003\000\002\057\006\000\002" +
    "\057\003\000\002\057\006\000\002\057\005\000\002\057" +
    "\010\000\002\054\004\000\002\060\003\000\002\060\005" +
    "\000\002\060\005\000\002\060\003\000\002\060\005\000" +
    "\002\061\003\000\002\061\004\000\002\061\003\000\002" +
    "\061\004\000\002\061\003\000\002\062\003\000\002\062" +
    "\003\000\002\063\010\000\002\063\010\000\002\064\003" +
    "\000\002\064\003\000\002\064\003\000\002\064\003\000" +
    "\002\064\003\000\002\064\003\000\002\065\005\000\002" +
    "\065\003\000\002\066\005\000\002\066\003\000\002\067" +
    "\004\000\002\067\003\000\002\070\006\000\002\071\005" +
    "\000\002\071\003\000\002\072\003\000\002\072\003\000" +
    "\002\072\003\000\002\072\003\000\002\072\003\000\002" +
    "\072\003\000\002\072\003\000\002\073\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0182\000\004\026\004\001\002\000\004\127\014\001" +
    "\002\000\006\026\004\130\011\001\002\000\004\002\010" +
    "\001\002\000\006\026\ufffe\130\ufffe\001\002\000\004\002" +
    "\001\001\002\000\004\002\000\001\002\000\006\026\uffff" +
    "\130\uffff\001\002\000\004\110\015\001\002\000\100\020" +
    "\uff57\024\uff57\025\uff57\040\uff57\042\uff57\045\uff57\053\uff57" +
    "\057\uff57\060\uff57\076\uff57\077\uff57\100\uff57\101\uff57\102" +
    "\uff57\103\uff57\105\uff57\106\uff57\107\uff57\110\uff57\111\uff57" +
    "\112\uff57\113\uff57\114\uff57\115\uff57\116\uff57\117\uff57\120" +
    "\uff57\121\uff57\122\uff57\123\uff57\124\uff57\001\002\000\022" +
    "\003\ufffa\014\ufffa\015\ufffa\016\ufffa\021\ufffa\046\ufffa\052" +
    "\ufffa\056\016\001\002\000\006\003\u0182\127\014\001\002" +
    "\000\020\003\ufff0\014\020\015\ufff0\016\ufff0\021\ufff0\046" +
    "\ufff0\052\ufff0\001\002\000\006\003\u0176\127\014\001\002" +
    "\000\016\003\ufff7\015\ufff7\016\023\021\ufff7\046\ufff7\052" +
    "\ufff7\001\002\000\014\003\uffe9\015\315\021\uffe9\046\uffe9" +
    "\052\uffe9\001\002\000\006\003\026\127\014\001\002\000" +
    "\014\077\uff5f\101\uff5f\106\uff5f\110\uff5f\111\uff5f\001\002" +
    "\000\010\077\034\106\035\111\033\001\002\000\004\110" +
    "\032\001\002\000\016\003\ufff5\015\ufff5\021\ufff5\046\ufff5" +
    "\052\ufff5\127\ufff5\001\002\000\016\003\ufff9\015\ufff9\021" +
    "\ufff9\046\ufff9\052\ufff9\127\014\001\002\000\016\003\ufff6" +
    "\015\ufff6\021\ufff6\046\ufff6\052\ufff6\127\ufff6\001\002\000" +
    "\014\003\ufff8\015\ufff8\021\ufff8\046\ufff8\052\ufff8\001\002" +
    "\000\036\005\044\006\046\007\054\010\057\011\053\012" +
    "\051\017\055\031\052\100\061\113\060\125\041\126\042" +
    "\127\014\132\045\001\002\000\036\005\044\006\046\007" +
    "\054\010\057\011\053\012\051\017\055\031\052\100\061" +
    "\113\060\125\041\126\042\127\014\132\045\001\002\000" +
    "\004\127\014\001\002\000\014\077\uff60\101\uff60\106\uff60" +
    "\110\uff60\111\uff60\001\002\000\004\104\306\001\002\000" +
    "\010\077\uff70\101\uff70\110\uff70\001\002\000\012\077\uff74" +
    "\101\uff74\104\uff74\110\uff74\001\002\000\012\077\uff76\101" +
    "\uff76\104\uff76\110\uff76\001\002\000\010\077\uff7b\101\uff7b" +
    "\110\uff7b\001\002\000\010\077\uff6d\101\uff6d\110\uff6d\001" +
    "\002\000\012\077\uff72\101\uff72\104\uff72\110\uff72\001\002" +
    "\000\010\077\uff6c\101\uff6c\110\uff6c\001\002\000\010\077" +
    "\uff71\101\uff71\110\uff71\001\002\000\004\110\305\001\002" +
    "\000\010\077\uff69\101\uff69\110\uff69\001\002\000\004\127" +
    "\014\001\002\000\010\077\uff6a\101\uff6a\110\uff6a\001\002" +
    "\000\010\077\uff6b\101\uff6b\110\uff6b\001\002\000\004\102" +
    "\066\001\002\000\010\077\uff78\101\uff78\110\uff78\001\002" +
    "\000\010\077\uff68\101\uff68\110\uff68\001\002\000\006\125" +
    "\064\126\065\001\002\000\004\127\014\001\002\000\006" +
    "\101\063\106\035\001\002\000\010\077\uff7a\101\uff7a\110" +
    "\uff7a\001\002\000\012\077\uff73\101\uff73\104\uff73\110\uff73" +
    "\001\002\000\012\077\uff75\101\uff75\104\uff75\110\uff75\001" +
    "\002\000\060\013\120\033\072\034\125\036\116\037\113" +
    "\041\115\061\101\062\075\063\104\064\077\065\121\066" +
    "\076\067\111\070\123\071\110\100\124\112\114\113\122" +
    "\125\074\126\073\127\014\131\106\132\102\001\002\000" +
    "\006\103\267\106\270\001\002\000\074\020\uff80\024\uff80" +
    "\025\uff80\040\uff80\042\uff80\045\uff80\053\uff80\057\uff80\060" +
    "\uff80\077\uff80\101\uff80\102\264\103\uff80\105\uff80\106\uff80" +
    "\107\uff80\110\uff80\111\uff80\112\uff80\113\uff80\114\uff80\115" +
    "\uff80\116\uff80\117\uff80\120\uff80\121\uff80\122\uff80\123\uff80" +
    "\124\uff80\001\002\000\070\020\uff93\024\uff93\025\uff93\040" +
    "\uff93\042\uff93\045\uff93\053\uff93\057\uff93\060\uff93\077\uff93" +
    "\101\uff93\103\uff93\105\uff93\106\uff93\110\uff93\111\uff93\112" +
    "\uff93\113\uff93\114\uff93\115\uff93\116\uff93\117\uff93\120\uff93" +
    "\121\uff93\122\uff93\123\uff93\124\uff93\001\002\000\004\100" +
    "\261\001\002\000\070\020\uff5e\024\uff5e\025\uff5e\040\uff5e" +
    "\042\uff5e\045\uff5e\053\uff5e\057\uff5e\060\uff5e\077\uff5e\101" +
    "\uff5e\103\uff5e\105\uff5e\106\uff5e\110\uff5e\111\uff5e\112\uff5e" +
    "\113\uff5e\114\uff5e\115\uff5e\116\uff5e\117\uff5e\120\uff5e\121" +
    "\uff5e\122\uff5e\123\uff5e\124\uff5e\001\002\000\070\020\uff5d" +
    "\024\uff5d\025\uff5d\040\uff5d\042\uff5d\045\uff5d\053\uff5d\057" +
    "\uff5d\060\uff5d\077\uff5d\101\uff5d\103\uff5d\105\uff5d\106\uff5d" +
    "\110\uff5d\111\uff5d\112\uff5d\113\uff5d\114\uff5d\115\uff5d\116" +
    "\uff5d\117\uff5d\120\uff5d\121\uff5d\122\uff5d\123\uff5d\124\uff5d" +
    "\001\002\000\004\100\256\001\002\000\004\100\253\001" +
    "\002\000\004\100\250\001\002\000\070\020\uff90\024\uff90" +
    "\025\uff90\040\uff90\042\uff90\045\uff90\053\uff90\057\uff90\060" +
    "\uff90\077\uff90\101\uff90\103\uff90\105\uff90\106\uff90\110\uff90" +
    "\111\uff90\112\uff90\113\uff90\114\uff90\115\uff90\116\uff90\117" +
    "\uff90\120\uff90\121\uff90\122\uff90\123\uff90\124\uff90\001\002" +
    "\000\004\100\243\001\002\000\070\020\uff5c\024\uff5c\025" +
    "\uff5c\040\uff5c\042\uff5c\045\uff5c\053\uff5c\057\uff5c\060\uff5c" +
    "\077\uff5c\101\uff5c\103\uff5c\105\uff5c\106\uff5c\110\uff5c\111" +
    "\uff5c\112\uff5c\113\uff5c\114\uff5c\115\uff5c\116\uff5c\117\uff5c" +
    "\120\uff5c\121\uff5c\122\uff5c\123\uff5c\124\uff5c\001\002\000" +
    "\072\020\uff91\024\uff91\025\uff91\040\uff91\042\uff91\045\uff91" +
    "\053\uff91\057\uff91\060\uff91\077\uff91\101\uff91\103\uff91\105" +
    "\uff91\106\uff91\107\236\110\uff91\111\uff91\112\uff91\113\uff91" +
    "\114\uff91\115\uff91\116\uff91\117\uff91\120\uff91\121\uff91\122" +
    "\uff91\123\uff91\124\uff91\001\002\000\004\100\231\001\002" +
    "\000\100\020\uff82\024\uff82\025\uff82\040\uff82\042\uff82\045" +
    "\uff82\053\uff82\057\uff82\060\uff82\076\uff82\077\uff82\100\220" +
    "\101\uff82\102\216\103\uff82\105\uff82\106\uff82\107\uff82\110" +
    "\uff82\111\uff82\112\uff82\113\uff82\114\uff82\115\uff82\116\uff82" +
    "\117\uff82\120\uff82\121\uff82\122\uff82\123\uff82\124\uff82\001" +
    "\002\000\070\020\uff5b\024\uff5b\025\uff5b\040\uff5b\042\uff5b" +
    "\045\uff5b\053\uff5b\057\uff5b\060\uff5b\077\uff5b\101\uff5b\103" +
    "\uff5b\105\uff5b\106\uff5b\110\uff5b\111\uff5b\112\uff5b\113\uff5b" +
    "\114\uff5b\115\uff5b\116\uff5b\117\uff5b\120\uff5b\121\uff5b\122" +
    "\uff5b\123\uff5b\124\uff5b\001\002\000\050\040\134\042\146" +
    "\057\132\060\133\077\136\103\uff64\105\214\106\uff64\112" +
    "\143\113\142\114\145\115\140\116\151\117\152\120\141" +
    "\121\144\122\137\123\135\124\150\001\002\000\004\100" +
    "\211\001\002\000\004\100\204\001\002\000\006\103\uff66" +
    "\106\uff66\001\002\000\070\020\uff59\024\uff59\025\uff59\040" +
    "\uff59\042\uff59\045\uff59\053\uff59\057\uff59\060\uff59\077\uff59" +
    "\101\uff59\103\uff59\105\uff59\106\uff59\110\uff59\111\uff59\112" +
    "\uff59\113\uff59\114\uff59\115\uff59\116\uff59\117\uff59\120\uff59" +
    "\121\uff59\122\uff59\123\uff59\124\uff59\001\002\000\060\013" +
    "\120\033\072\034\125\036\116\037\113\041\115\061\101" +
    "\062\075\063\104\064\077\065\121\066\076\067\111\070" +
    "\123\071\110\100\124\112\114\113\122\125\074\126\073" +
    "\127\014\131\106\132\102\001\002\000\060\013\120\033" +
    "\072\034\125\036\116\037\113\041\115\061\101\062\075" +
    "\063\104\064\077\065\121\066\076\067\111\070\123\071" +
    "\110\100\124\112\114\113\122\125\074\126\073\127\014" +
    "\131\106\132\102\001\002\000\070\020\uff5a\024\uff5a\025" +
    "\uff5a\040\uff5a\042\uff5a\045\uff5a\053\uff5a\057\uff5a\060\uff5a" +
    "\077\uff5a\101\uff5a\103\uff5a\105\uff5a\106\uff5a\110\uff5a\111" +
    "\uff5a\112\uff5a\113\uff5a\114\uff5a\115\uff5a\116\uff5a\117\uff5a" +
    "\120\uff5a\121\uff5a\122\uff5a\123\uff5a\124\uff5a\001\002\000" +
    "\070\020\uff92\024\uff92\025\uff92\040\uff92\042\uff92\045\uff92" +
    "\053\uff92\057\uff92\060\uff92\077\uff92\101\uff92\103\uff92\105" +
    "\uff92\106\uff92\110\uff92\111\uff92\112\uff92\113\uff92\114\uff92" +
    "\115\uff92\116\uff92\117\uff92\120\uff92\121\uff92\122\uff92\123" +
    "\uff92\124\uff92\001\002\000\070\020\uff58\024\uff58\025\uff58" +
    "\040\uff58\042\uff58\045\uff58\053\uff58\057\uff58\060\uff58\077" +
    "\uff58\101\uff58\103\uff58\105\uff58\106\uff58\110\uff58\111\uff58" +
    "\112\uff58\113\uff58\114\uff58\115\uff58\116\uff58\117\uff58\120" +
    "\uff58\121\uff58\122\uff58\123\uff58\124\uff58\001\002\000\004" +
    "\100\177\001\002\000\060\013\120\033\072\034\125\036" +
    "\116\037\113\041\115\061\101\062\075\063\104\064\077" +
    "\065\121\066\076\067\111\070\123\071\110\100\124\112" +
    "\114\113\122\125\074\126\073\127\014\131\106\132\102" +
    "\001\002\000\004\100\173\001\002\000\060\013\120\033" +
    "\072\034\125\036\116\037\113\041\115\061\101\062\075" +
    "\063\104\064\077\065\121\066\076\067\111\070\123\071" +
    "\110\100\124\112\114\113\122\125\074\126\073\127\014" +
    "\131\106\132\102\001\002\000\004\100\126\001\002\000" +
    "\004\127\014\001\002\000\004\101\130\001\002\000\070" +
    "\020\uff8f\024\uff8f\025\uff8f\040\uff8f\042\uff8f\045\uff8f\053" +
    "\uff8f\057\uff8f\060\uff8f\077\uff8f\101\uff8f\103\uff8f\105\uff8f" +
    "\106\uff8f\110\uff8f\111\uff8f\112\uff8f\113\uff8f\114\uff8f\115" +
    "\uff8f\116\uff8f\117\uff8f\120\uff8f\121\uff8f\122\uff8f\123\uff8f" +
    "\124\uff8f\001\002\000\044\040\134\042\146\057\132\060" +
    "\133\077\136\101\147\112\143\113\142\114\145\115\140" +
    "\116\151\117\152\120\141\121\144\122\137\123\135\124" +
    "\150\001\002\000\060\013\120\033\072\034\125\036\116" +
    "\037\113\041\115\061\101\062\075\063\104\064\077\065" +
    "\121\066\076\067\111\070\123\071\110\100\124\112\114" +
    "\113\122\125\074\126\073\127\014\131\106\132\102\001" +
    "\002\000\060\013\120\033\072\034\125\036\116\037\113" +
    "\041\115\061\101\062\075\063\104\064\077\065\121\066" +
    "\076\067\111\070\123\071\110\100\124\112\114\113\122" +
    "\125\074\126\073\127\014\131\106\132\102\001\002\000" +
    "\060\013\120\033\072\034\125\036\116\037\113\041\115" +
    "\061\101\062\075\063\104\064\077\065\121\066\076\067" +
    "\111\070\123\071\110\100\124\112\114\113\122\125\074" +
    "\126\073\127\014\131\106\132\102\001\002\000\060\013" +
    "\120\033\072\034\125\036\116\037\113\041\115\061\101" +
    "\062\075\063\104\064\077\065\121\066\076\067\111\070" +
    "\123\071\110\100\124\112\114\113\122\125\074\126\073" +
    "\127\014\131\106\132\102\001\002\000\060\013\120\033" +
    "\072\034\125\036\116\037\113\041\115\061\101\062\075" +
    "\063\104\064\077\065\121\066\076\067\111\070\123\071" +
    "\110\100\124\112\114\113\122\125\074\126\073\127\014" +
    "\131\106\132\102\001\002\000\060\013\120\033\072\034" +
    "\125\036\116\037\113\041\115\061\101\062\075\063\104" +
    "\064\077\065\121\066\076\067\111\070\123\071\110\100" +
    "\124\112\114\113\122\125\074\126\073\127\014\131\106" +
    "\132\102\001\002\000\060\013\120\033\072\034\125\036" +
    "\116\037\113\041\115\061\101\062\075\063\104\064\077" +
    "\065\121\066\076\067\111\070\123\071\110\100\124\112" +
    "\114\113\122\125\074\126\073\127\014\131\106\132\102" +
    "\001\002\000\060\013\120\033\072\034\125\036\116\037" +
    "\113\041\115\061\101\062\075\063\104\064\077\065\121" +
    "\066\076\067\111\070\123\071\110\100\124\112\114\113" +
    "\122\125\074\126\073\127\014\131\106\132\102\001\002" +
    "\000\060\013\120\033\072\034\125\036\116\037\113\041" +
    "\115\061\101\062\075\063\104\064\077\065\121\066\076" +
    "\067\111\070\123\071\110\100\124\112\114\113\122\125" +
    "\074\126\073\127\014\131\106\132\102\001\002\000\060" +
    "\013\120\033\072\034\125\036\116\037\113\041\115\061" +
    "\101\062\075\063\104\064\077\065\121\066\076\067\111" +
    "\070\123\071\110\100\124\112\114\113\122\125\074\126" +
    "\073\127\014\131\106\132\102\001\002\000\060\013\120" +
    "\033\072\034\125\036\116\037\113\041\115\061\101\062" +
    "\075\063\104\064\077\065\121\066\076\067\111\070\123" +
    "\071\110\100\124\112\114\113\122\125\074\126\073\127" +
    "\014\131\106\132\102\001\002\000\060\013\120\033\072" +
    "\034\125\036\116\037\113\041\115\061\101\062\075\063" +
    "\104\064\077\065\121\066\076\067\111\070\123\071\110" +
    "\100\124\112\114\113\122\125\074\126\073\127\014\131" +
    "\106\132\102\001\002\000\060\013\120\033\072\034\125" +
    "\036\116\037\113\041\115\061\101\062\075\063\104\064" +
    "\077\065\121\066\076\067\111\070\123\071\110\100\124" +
    "\112\114\113\122\125\074\126\073\127\014\131\106\132" +
    "\102\001\002\000\070\020\uff94\024\uff94\025\uff94\040\uff94" +
    "\042\uff94\045\uff94\053\uff94\057\uff94\060\uff94\077\uff94\101" +
    "\uff94\103\uff94\105\uff94\106\uff94\110\uff94\111\uff94\112\uff94" +
    "\113\uff94\114\uff94\115\uff94\116\uff94\117\uff94\120\uff94\121" +
    "\uff94\122\uff94\123\uff94\124\uff94\001\002\000\060\013\120" +
    "\033\072\034\125\036\116\037\113\041\115\061\101\062" +
    "\075\063\104\064\077\065\121\066\076\067\111\070\123" +
    "\071\110\100\124\112\114\113\122\125\074\126\073\127" +
    "\014\131\106\132\102\001\002\000\060\013\120\033\072" +
    "\034\125\036\116\037\113\041\115\061\101\062\075\063" +
    "\104\064\077\065\121\066\076\067\111\070\123\071\110" +
    "\100\124\112\114\113\122\125\074\126\073\127\014\131" +
    "\106\132\102\001\002\000\060\013\120\033\072\034\125" +
    "\036\116\037\113\041\115\061\101\062\075\063\104\064" +
    "\077\065\121\066\076\067\111\070\123\071\110\100\124" +
    "\112\114\113\122\125\074\126\073\127\014\131\106\132" +
    "\102\001\002\000\070\020\uff98\024\uff98\025\uff98\040\uff98" +
    "\042\uff98\045\uff98\053\uff98\057\uff98\060\uff98\077\uff98\101" +
    "\uff98\103\uff98\105\uff98\106\uff98\110\uff98\111\uff98\112\uff98" +
    "\113\uff98\114\uff98\115\uff98\116\151\117\uff98\120\uff98\121" +
    "\uff98\122\uff98\123\uff98\124\uff98\001\002\000\070\020\uff97" +
    "\024\uff97\025\uff97\040\uff97\042\uff97\045\uff97\053\uff97\057" +
    "\uff97\060\uff97\077\uff97\101\uff97\103\uff97\105\uff97\106\uff97" +
    "\110\uff97\111\uff97\112\uff97\113\uff97\114\uff97\115\uff97\116" +
    "\151\117\uff97\120\uff97\121\uff97\122\uff97\123\uff97\124\uff97" +
    "\001\002\000\054\020\uff9f\024\uff9f\025\uff9f\040\uff9f\042" +
    "\uff9f\045\uff9f\053\uff9f\057\uff9f\060\uff9f\101\uff9f\103\uff9f" +
    "\105\uff9f\106\uff9f\110\uff9f\111\uff9f\112\143\113\142\114" +
    "\145\115\140\116\151\117\152\001\002\000\070\020\uffa7" +
    "\024\uffa7\025\uffa7\040\134\042\uffa7\045\uffa7\053\uffa7\057" +
    "\132\060\133\077\136\101\uffa7\103\uffa7\105\uffa7\106\uffa7" +
    "\110\uffa7\111\uffa7\112\143\113\142\114\145\115\140\116" +
    "\151\117\152\120\141\121\144\122\137\123\135\124\150" +
    "\001\002\000\070\020\uff9a\024\uff9a\025\uff9a\040\uff9a\042" +
    "\uff9a\045\uff9a\053\uff9a\057\uff9a\060\uff9a\077\uff9a\101\uff9a" +
    "\103\uff9a\105\uff9a\106\uff9a\110\uff9a\111\uff9a\112\uff9a\113" +
    "\uff9a\114\uff9a\115\uff9a\116\151\117\uff9a\120\uff9a\121\uff9a" +
    "\122\uff9a\123\uff9a\124\uff9a\001\002\000\054\020\uff9e\024" +
    "\uff9e\025\uff9e\040\uff9e\042\uff9e\045\uff9e\053\uff9e\057\uff9e" +
    "\060\uff9e\101\uff9e\103\uff9e\105\uff9e\106\uff9e\110\uff9e\111" +
    "\uff9e\112\143\113\142\114\145\115\140\116\151\117\152" +
    "\001\002\000\070\020\uff9c\024\uff9c\025\uff9c\040\uff9c\042" +
    "\uff9c\045\uff9c\053\uff9c\057\uff9c\060\uff9c\077\uff9c\101\uff9c" +
    "\103\uff9c\105\uff9c\106\uff9c\110\uff9c\111\uff9c\112\uff9c\113" +
    "\uff9c\114\145\115\140\116\151\117\152\120\uff9c\121\uff9c" +
    "\122\uff9c\123\uff9c\124\uff9c\001\002\000\070\020\uff9b\024" +
    "\uff9b\025\uff9b\040\uff9b\042\uff9b\045\uff9b\053\uff9b\057\uff9b" +
    "\060\uff9b\077\uff9b\101\uff9b\103\uff9b\105\uff9b\106\uff9b\110" +
    "\uff9b\111\uff9b\112\uff9b\113\uff9b\114\145\115\140\116\151" +
    "\117\152\120\uff9b\121\uff9b\122\uff9b\123\uff9b\124\uff9b\001" +
    "\002\000\054\020\uffa1\024\uffa1\025\uffa1\040\uffa1\042\uffa1" +
    "\045\uffa1\053\uffa1\057\uffa1\060\uffa1\101\uffa1\103\uffa1\105" +
    "\uffa1\106\uffa1\110\uffa1\111\uffa1\112\143\113\142\114\145" +
    "\115\140\116\151\117\152\001\002\000\070\020\uff99\024" +
    "\uff99\025\uff99\040\uff99\042\uff99\045\uff99\053\uff99\057\uff99" +
    "\060\uff99\077\uff99\101\uff99\103\uff99\105\uff99\106\uff99\110" +
    "\uff99\111\uff99\112\uff99\113\uff99\114\uff99\115\uff99\116\151" +
    "\117\uff99\120\uff99\121\uff99\122\uff99\123\uff99\124\uff99\001" +
    "\002\000\054\020\uff9d\024\uff9d\025\uff9d\040\uff9d\042\uff9d" +
    "\045\uff9d\053\uff9d\057\uff9d\060\uff9d\101\uff9d\103\uff9d\105" +
    "\uff9d\106\uff9d\110\uff9d\111\uff9d\112\143\113\142\114\145" +
    "\115\140\116\151\117\152\001\002\000\054\020\uffa2\024" +
    "\uffa2\025\uffa2\040\uffa2\042\uffa2\045\uffa2\053\uffa2\057\uffa2" +
    "\060\uffa2\101\uffa2\103\uffa2\105\uffa2\106\uffa2\110\uffa2\111" +
    "\uffa2\112\143\113\142\114\145\115\140\116\151\117\152" +
    "\001\002\000\054\020\uffa0\024\uffa0\025\uffa0\040\uffa0\042" +
    "\uffa0\045\uffa0\053\uffa0\057\uffa0\060\uffa0\101\uffa0\103\uffa0" +
    "\105\uffa0\106\uffa0\110\uffa0\111\uffa0\112\143\113\142\114" +
    "\145\115\140\116\151\117\152\001\002\000\070\020\uffa4" +
    "\024\uffa4\025\uffa4\040\uffa4\042\uffa4\045\uffa4\053\uffa4\057" +
    "\uffa4\060\uffa4\077\136\101\uffa4\103\uffa4\105\uffa4\106\uffa4" +
    "\110\uffa4\111\uffa4\112\143\113\142\114\145\115\140\116" +
    "\151\117\152\120\141\121\144\122\137\123\135\124\150" +
    "\001\002\000\070\020\uffa5\024\uffa5\025\uffa5\040\134\042" +
    "\uffa5\045\uffa5\053\uffa5\057\uffa5\060\uffa5\077\136\101\uffa5" +
    "\103\uffa5\105\uffa5\106\uffa5\110\uffa5\111\uffa5\112\143\113" +
    "\142\114\145\115\140\116\151\117\152\120\141\121\144" +
    "\122\137\123\135\124\150\001\002\000\070\020\uffa6\024" +
    "\uffa6\025\uffa6\040\134\042\uffa6\045\uffa6\053\uffa6\057\uffa6" +
    "\060\uffa6\077\136\101\uffa6\103\uffa6\105\uffa6\106\uffa6\110" +
    "\uffa6\111\uffa6\112\143\113\142\114\145\115\140\116\151" +
    "\117\152\120\141\121\144\122\137\123\135\124\150\001" +
    "\002\000\060\013\120\033\072\034\125\036\116\037\113" +
    "\041\115\061\101\062\075\063\104\064\077\065\121\066" +
    "\076\067\111\070\123\071\110\100\124\112\114\113\122" +
    "\125\074\126\073\127\014\131\106\132\102\001\002\000" +
    "\044\040\134\042\146\057\132\060\133\077\136\101\175" +
    "\112\143\113\142\114\145\115\140\116\151\117\152\120" +
    "\141\121\144\122\137\123\135\124\150\001\002\000\070" +
    "\020\uff86\024\uff86\025\uff86\040\uff86\042\uff86\045\uff86\053" +
    "\uff86\057\uff86\060\uff86\077\uff86\101\uff86\103\uff86\105\uff86" +
    "\106\uff86\110\uff86\111\uff86\112\uff86\113\uff86\114\uff86\115" +
    "\uff86\116\uff86\117\uff86\120\uff86\121\uff86\122\uff86\123\uff86" +
    "\124\uff86\001\002\000\070\020\uff95\024\uff95\025\uff95\040" +
    "\uff95\042\uff95\045\uff95\053\uff95\057\uff95\060\uff95\077\uff95" +
    "\101\uff95\103\uff95\105\uff95\106\uff95\110\uff95\111\uff95\112" +
    "\uff95\113\uff95\114\145\115\140\116\151\117\152\120\uff95" +
    "\121\uff95\122\uff95\123\uff95\124\uff95\001\002\000\060\013" +
    "\120\033\072\034\125\036\116\037\113\041\115\061\101" +
    "\062\075\063\104\064\077\065\121\066\076\067\111\070" +
    "\123\071\110\100\124\112\114\113\122\125\074\126\073" +
    "\127\014\131\106\132\102\001\002\000\044\040\134\042" +
    "\146\057\132\060\133\077\136\101\201\112\143\113\142" +
    "\114\145\115\140\116\151\117\152\120\141\121\144\122" +
    "\137\123\135\124\150\001\002\000\070\020\uff89\024\uff89" +
    "\025\uff89\040\uff89\042\uff89\045\uff89\053\uff89\057\uff89\060" +
    "\uff89\077\uff89\101\uff89\103\uff89\105\uff89\106\uff89\110\uff89" +
    "\111\uff89\112\uff89\113\uff89\114\uff89\115\uff89\116\uff89\117" +
    "\uff89\120\uff89\121\uff89\122\uff89\123\uff89\124\uff89\001\002" +
    "\000\070\020\uffa3\024\uffa3\025\uffa3\040\uffa3\042\uffa3\045" +
    "\uffa3\053\uffa3\057\uffa3\060\uffa3\077\136\101\uffa3\103\uffa3" +
    "\105\uffa3\106\uffa3\110\uffa3\111\uffa3\112\143\113\142\114" +
    "\145\115\140\116\151\117\152\120\141\121\144\122\137" +
    "\123\135\124\150\001\002\000\070\020\uff96\024\uff96\025" +
    "\uff96\040\uff96\042\uff96\045\uff96\053\uff96\057\uff96\060\uff96" +
    "\077\uff96\101\uff96\103\uff96\105\uff96\106\uff96\110\uff96\111" +
    "\uff96\112\uff96\113\uff96\114\145\115\140\116\151\117\152" +
    "\120\uff96\121\uff96\122\uff96\123\uff96\124\uff96\001\002\000" +
    "\060\013\120\033\072\034\125\036\116\037\113\041\115" +
    "\061\101\062\075\063\104\064\077\065\121\066\076\067" +
    "\111\070\123\071\110\100\124\112\114\113\122\125\074" +
    "\126\073\127\014\131\106\132\102\001\002\000\044\040" +
    "\134\042\146\057\132\060\133\077\136\106\206\112\143" +
    "\113\142\114\145\115\140\116\151\117\152\120\141\121" +
    "\144\122\137\123\135\124\150\001\002\000\060\013\120" +
    "\033\072\034\125\036\116\037\113\041\115\061\101\062" +
    "\075\063\104\064\077\065\121\066\076\067\111\070\123" +
    "\071\110\100\124\112\114\113\122\125\074\126\073\127" +
    "\014\131\106\132\102\001\002\000\044\040\134\042\146" +
    "\057\132\060\133\077\136\101\210\112\143\113\142\114" +
    "\145\115\140\116\151\117\152\120\141\121\144\122\137" +
    "\123\135\124\150\001\002\000\070\020\uff87\024\uff87\025" +
    "\uff87\040\uff87\042\uff87\045\uff87\053\uff87\057\uff87\060\uff87" +
    "\077\uff87\101\uff87\103\uff87\105\uff87\106\uff87\110\uff87\111" +
    "\uff87\112\uff87\113\uff87\114\uff87\115\uff87\116\uff87\117\uff87" +
    "\120\uff87\121\uff87\122\uff87\123\uff87\124\uff87\001\002\000" +
    "\060\013\120\033\072\034\125\036\116\037\113\041\115" +
    "\061\101\062\075\063\104\064\077\065\121\066\076\067" +
    "\111\070\123\071\110\100\124\112\114\113\122\125\074" +
    "\126\073\127\014\131\106\132\102\001\002\000\044\040" +
    "\134\042\146\057\132\060\133\077\136\101\213\112\143" +
    "\113\142\114\145\115\140\116\151\117\152\120\141\121" +
    "\144\122\137\123\135\124\150\001\002\000\070\020\uff85" +
    "\024\uff85\025\uff85\040\uff85\042\uff85\045\uff85\053\uff85\057" +
    "\uff85\060\uff85\077\uff85\101\uff85\103\uff85\105\uff85\106\uff85" +
    "\110\uff85\111\uff85\112\uff85\113\uff85\114\uff85\115\uff85\116" +
    "\uff85\117\uff85\120\uff85\121\uff85\122\uff85\123\uff85\124\uff85" +
    "\001\002\000\060\013\120\033\072\034\125\036\116\037" +
    "\113\041\115\061\101\062\075\063\104\064\077\065\121" +
    "\066\076\067\111\070\123\071\110\100\124\112\114\113" +
    "\122\125\074\126\073\127\014\131\106\132\102\001\002" +
    "\000\046\040\134\042\146\057\132\060\133\077\136\103" +
    "\uff65\106\uff65\112\143\113\142\114\145\115\140\116\151" +
    "\117\152\120\141\121\144\122\137\123\135\124\150\001" +
    "\002\000\060\013\120\033\072\034\125\036\116\037\113" +
    "\041\115\061\101\062\075\063\104\064\077\065\121\066" +
    "\076\067\111\070\123\071\110\100\124\112\114\113\122" +
    "\125\074\126\073\127\014\131\106\132\102\001\002\000" +
    "\076\020\uff7c\024\uff7c\025\uff7c\040\uff7c\042\uff7c\045\uff7c" +
    "\053\uff7c\057\uff7c\060\uff7c\076\uff7c\077\uff7c\101\uff7c\102" +
    "\uff7c\103\uff7c\105\uff7c\106\uff7c\107\uff7c\110\uff7c\111\uff7c" +
    "\112\uff7c\113\uff7c\114\uff7c\115\uff7c\116\uff7c\117\uff7c\120" +
    "\uff7c\121\uff7c\122\uff7c\123\uff7c\124\uff7c\001\002\000\062" +
    "\013\120\033\072\034\125\036\116\037\113\041\115\061" +
    "\101\062\075\063\104\064\077\065\121\066\076\067\111" +
    "\070\123\071\110\100\124\101\221\112\114\113\122\125" +
    "\074\126\073\127\014\131\106\132\102\001\002\000\076" +
    "\020\uff83\024\uff83\025\uff83\040\uff83\042\uff83\045\uff83\053" +
    "\uff83\057\uff83\060\uff83\076\uff83\077\uff83\101\uff83\102\uff83" +
    "\103\uff83\105\uff83\106\uff83\107\uff83\110\uff83\111\uff83\112" +
    "\uff83\113\uff83\114\uff83\115\uff83\116\uff83\117\uff83\120\uff83" +
    "\121\uff83\122\uff83\123\uff83\124\uff83\001\002\000\052\040" +
    "\134\042\146\057\132\060\133\077\136\101\uffa8\103\uffa8" +
    "\106\uffa8\111\uffa8\112\143\113\142\114\145\115\140\116" +
    "\151\117\152\120\141\121\144\122\137\123\135\124\150" +
    "\001\002\000\006\101\224\106\225\001\002\000\076\020" +
    "\uff84\024\uff84\025\uff84\040\uff84\042\uff84\045\uff84\053\uff84" +
    "\057\uff84\060\uff84\076\uff84\077\uff84\101\uff84\102\uff84\103" +
    "\uff84\105\uff84\106\uff84\107\uff84\110\uff84\111\uff84\112\uff84" +
    "\113\uff84\114\uff84\115\uff84\116\uff84\117\uff84\120\uff84\121" +
    "\uff84\122\uff84\123\uff84\124\uff84\001\002\000\060\013\120" +
    "\033\072\034\125\036\116\037\113\041\115\061\101\062" +
    "\075\063\104\064\077\065\121\066\076\067\111\070\123" +
    "\071\110\100\124\112\114\113\122\125\074\126\073\127" +
    "\014\131\106\132\102\001\002\000\052\040\134\042\146" +
    "\057\132\060\133\077\136\101\uffa9\103\uffa9\106\uffa9\111" +
    "\uffa9\112\143\113\142\114\145\115\140\116\151\117\152" +
    "\120\141\121\144\122\137\123\135\124\150\001\002\000" +
    "\006\103\230\106\225\001\002\000\074\020\uff81\024\uff81" +
    "\025\uff81\040\uff81\042\uff81\045\uff81\053\uff81\057\uff81\060" +
    "\uff81\076\uff81\077\uff81\101\uff81\103\uff81\105\uff81\106\uff81" +
    "\107\uff81\110\uff81\111\uff81\112\uff81\113\uff81\114\uff81\115" +
    "\uff81\116\uff81\117\uff81\120\uff81\121\uff81\122\uff81\123\uff81" +
    "\124\uff81\001\002\000\060\013\120\033\072\034\125\036" +
    "\116\037\113\041\115\061\101\062\075\063\104\064\077" +
    "\065\121\066\076\067\111\070\123\071\110\100\124\112" +
    "\114\113\122\125\074\126\073\127\014\131\106\132\102" +
    "\001\002\000\044\040\134\042\146\057\132\060\133\077" +
    "\136\106\233\112\143\113\142\114\145\115\140\116\151" +
    "\117\152\120\141\121\144\122\137\123\135\124\150\001" +
    "\002\000\060\013\120\033\072\034\125\036\116\037\113" +
    "\041\115\061\101\062\075\063\104\064\077\065\121\066" +
    "\076\067\111\070\123\071\110\100\124\112\114\113\122" +
    "\125\074\126\073\127\014\131\106\132\102\001\002\000" +
    "\044\040\134\042\146\057\132\060\133\077\136\101\235" +
    "\112\143\113\142\114\145\115\140\116\151\117\152\120" +
    "\141\121\144\122\137\123\135\124\150\001\002\000\070" +
    "\020\uff8b\024\uff8b\025\uff8b\040\uff8b\042\uff8b\045\uff8b\053" +
    "\uff8b\057\uff8b\060\uff8b\077\uff8b\101\uff8b\103\uff8b\105\uff8b" +
    "\106\uff8b\110\uff8b\111\uff8b\112\uff8b\113\uff8b\114\uff8b\115" +
    "\uff8b\116\uff8b\117\uff8b\120\uff8b\121\uff8b\122\uff8b\123\uff8b" +
    "\124\uff8b\001\002\000\004\127\014\001\002\000\076\020" +
    "\uff7e\024\uff7e\025\uff7e\040\uff7e\042\uff7e\045\uff7e\053\uff7e" +
    "\057\uff7e\060\uff7e\076\uff7e\077\uff7e\101\uff7e\102\240\103" +
    "\uff7e\105\uff7e\106\uff7e\107\uff7e\110\uff7e\111\uff7e\112\uff7e" +
    "\113\uff7e\114\uff7e\115\uff7e\116\uff7e\117\uff7e\120\uff7e\121" +
    "\uff7e\122\uff7e\123\uff7e\124\uff7e\001\002\000\060\013\120" +
    "\033\072\034\125\036\116\037\113\041\115\061\101\062" +
    "\075\063\104\064\077\065\121\066\076\067\111\070\123" +
    "\071\110\100\124\112\114\113\122\125\074\126\073\127" +
    "\014\131\106\132\102\001\002\000\006\103\242\106\225" +
    "\001\002\000\074\020\uff7d\024\uff7d\025\uff7d\040\uff7d\042" +
    "\uff7d\045\uff7d\053\uff7d\057\uff7d\060\uff7d\076\uff7d\077\uff7d" +
    "\101\uff7d\103\uff7d\105\uff7d\106\uff7d\107\uff7d\110\uff7d\111" +
    "\uff7d\112\uff7d\113\uff7d\114\uff7d\115\uff7d\116\uff7d\117\uff7d" +
    "\120\uff7d\121\uff7d\122\uff7d\123\uff7d\124\uff7d\001\002\000" +
    "\060\013\120\033\072\034\125\036\116\037\113\041\115" +
    "\061\101\062\075\063\104\064\077\065\121\066\076\067" +
    "\111\070\123\071\110\100\124\112\114\113\122\125\074" +
    "\126\073\127\014\131\106\132\102\001\002\000\044\040" +
    "\134\042\146\057\132\060\133\077\136\106\245\112\143" +
    "\113\142\114\145\115\140\116\151\117\152\120\141\121" +
    "\144\122\137\123\135\124\150\001\002\000\060\013\120" +
    "\033\072\034\125\036\116\037\113\041\115\061\101\062" +
    "\075\063\104\064\077\065\121\066\076\067\111\070\123" +
    "\071\110\100\124\112\114\113\122\125\074\126\073\127" +
    "\014\131\106\132\102\001\002\000\044\040\134\042\146" +
    "\057\132\060\133\077\136\101\247\112\143\113\142\114" +
    "\145\115\140\116\151\117\152\120\141\121\144\122\137" +
    "\123\135\124\150\001\002\000\070\020\uff8d\024\uff8d\025" +
    "\uff8d\040\uff8d\042\uff8d\045\uff8d\053\uff8d\057\uff8d\060\uff8d" +
    "\077\uff8d\101\uff8d\103\uff8d\105\uff8d\106\uff8d\110\uff8d\111" +
    "\uff8d\112\uff8d\113\uff8d\114\uff8d\115\uff8d\116\uff8d\117\uff8d" +
    "\120\uff8d\121\uff8d\122\uff8d\123\uff8d\124\uff8d\001\002\000" +
    "\060\013\120\033\072\034\125\036\116\037\113\041\115" +
    "\061\101\062\075\063\104\064\077\065\121\066\076\067" +
    "\111\070\123\071\110\100\124\112\114\113\122\125\074" +
    "\126\073\127\014\131\106\132\102\001\002\000\044\040" +
    "\134\042\146\057\132\060\133\077\136\101\252\112\143" +
    "\113\142\114\145\115\140\116\151\117\152\120\141\121" +
    "\144\122\137\123\135\124\150\001\002\000\070\020\uff8a" +
    "\024\uff8a\025\uff8a\040\uff8a\042\uff8a\045\uff8a\053\uff8a\057" +
    "\uff8a\060\uff8a\077\uff8a\101\uff8a\103\uff8a\105\uff8a\106\uff8a" +
    "\110\uff8a\111\uff8a\112\uff8a\113\uff8a\114\uff8a\115\uff8a\116" +
    "\uff8a\117\uff8a\120\uff8a\121\uff8a\122\uff8a\123\uff8a\124\uff8a" +
    "\001\002\000\060\013\120\033\072\034\125\036\116\037" +
    "\113\041\115\061\101\062\075\063\104\064\077\065\121" +
    "\066\076\067\111\070\123\071\110\100\124\112\114\113" +
    "\122\125\074\126\073\127\014\131\106\132\102\001\002" +
    "\000\044\040\134\042\146\057\132\060\133\077\136\101" +
    "\255\112\143\113\142\114\145\115\140\116\151\117\152" +
    "\120\141\121\144\122\137\123\135\124\150\001\002\000" +
    "\070\020\uff88\024\uff88\025\uff88\040\uff88\042\uff88\045\uff88" +
    "\053\uff88\057\uff88\060\uff88\077\uff88\101\uff88\103\uff88\105" +
    "\uff88\106\uff88\110\uff88\111\uff88\112\uff88\113\uff88\114\uff88" +
    "\115\uff88\116\uff88\117\uff88\120\uff88\121\uff88\122\uff88\123" +
    "\uff88\124\uff88\001\002\000\060\013\120\033\072\034\125" +
    "\036\116\037\113\041\115\061\101\062\075\063\104\064" +
    "\077\065\121\066\076\067\111\070\123\071\110\100\124" +
    "\112\114\113\122\125\074\126\073\127\014\131\106\132" +
    "\102\001\002\000\044\040\134\042\146\057\132\060\133" +
    "\077\136\101\260\112\143\113\142\114\145\115\140\116" +
    "\151\117\152\120\141\121\144\122\137\123\135\124\150" +
    "\001\002\000\070\020\uff8c\024\uff8c\025\uff8c\040\uff8c\042" +
    "\uff8c\045\uff8c\053\uff8c\057\uff8c\060\uff8c\077\uff8c\101\uff8c" +
    "\103\uff8c\105\uff8c\106\uff8c\110\uff8c\111\uff8c\112\uff8c\113" +
    "\uff8c\114\uff8c\115\uff8c\116\uff8c\117\uff8c\120\uff8c\121\uff8c" +
    "\122\uff8c\123\uff8c\124\uff8c\001\002\000\060\013\120\033" +
    "\072\034\125\036\116\037\113\041\115\061\101\062\075" +
    "\063\104\064\077\065\121\066\076\067\111\070\123\071" +
    "\110\100\124\112\114\113\122\125\074\126\073\127\014" +
    "\131\106\132\102\001\002\000\044\040\134\042\146\057" +
    "\132\060\133\077\136\101\263\112\143\113\142\114\145" +
    "\115\140\116\151\117\152\120\141\121\144\122\137\123" +
    "\135\124\150\001\002\000\070\020\uff8e\024\uff8e\025\uff8e" +
    "\040\uff8e\042\uff8e\045\uff8e\053\uff8e\057\uff8e\060\uff8e\077" +
    "\uff8e\101\uff8e\103\uff8e\105\uff8e\106\uff8e\110\uff8e\111\uff8e" +
    "\112\uff8e\113\uff8e\114\uff8e\115\uff8e\116\uff8e\117\uff8e\120" +
    "\uff8e\121\uff8e\122\uff8e\123\uff8e\124\uff8e\001\002\000\060" +
    "\013\120\033\072\034\125\036\116\037\113\041\115\061" +
    "\101\062\075\063\104\064\077\065\121\066\076\067\111" +
    "\070\123\071\110\100\124\112\114\113\122\125\074\126" +
    "\073\127\014\131\106\132\102\001\002\000\006\103\266" +
    "\106\225\001\002\000\074\020\uff7f\024\uff7f\025\uff7f\040" +
    "\uff7f\042\uff7f\045\uff7f\053\uff7f\057\uff7f\060\uff7f\076\uff7f" +
    "\077\uff7f\101\uff7f\103\uff7f\105\uff7f\106\uff7f\107\uff7f\110" +
    "\uff7f\111\uff7f\112\uff7f\113\uff7f\114\uff7f\115\uff7f\116\uff7f" +
    "\117\uff7f\120\uff7f\121\uff7f\122\uff7f\123\uff7f\124\uff7f\001" +
    "\002\000\004\020\272\001\002\000\060\013\120\033\072" +
    "\034\125\036\116\037\113\041\115\061\101\062\075\063" +
    "\104\064\077\065\121\066\076\067\111\070\123\071\110" +
    "\100\124\112\114\113\122\125\074\126\073\127\014\131" +
    "\106\132\102\001\002\000\006\103\uff67\106\uff67\001\002" +
    "\000\022\005\044\006\046\007\054\010\057\011\053\012" +
    "\051\017\055\127\014\001\002\000\010\077\uff6f\101\uff6f" +
    "\110\uff6f\001\002\000\010\077\uff6e\101\uff6e\110\uff6e\001" +
    "\002\000\006\022\304\127\014\001\002\000\006\022\uff62" +
    "\127\uff62\001\002\000\006\106\035\111\300\001\002\000" +
    "\036\005\044\006\046\007\054\010\057\011\053\012\051" +
    "\017\055\031\052\100\061\113\060\125\041\126\042\127" +
    "\014\132\045\001\002\000\004\110\302\001\002\000\006" +
    "\022\uff61\127\uff61\001\002\000\006\022\uff63\127\uff63\001" +
    "\002\000\010\077\uff79\101\uff79\110\uff79\001\002\000\016" +
    "\003\ufff3\015\ufff3\021\ufff3\046\ufff3\052\ufff3\127\ufff3\001" +
    "\002\000\012\113\060\125\041\126\042\132\045\001\002" +
    "\000\010\077\uff77\101\uff77\110\uff77\001\002\000\004\077" +
    "\311\001\002\000\060\013\120\033\072\034\125\036\116" +
    "\037\113\041\115\061\101\062\075\063\104\064\077\065" +
    "\121\066\076\067\111\070\123\071\110\100\124\112\114" +
    "\113\122\125\074\126\073\127\014\131\106\132\102\001" +
    "\002\000\044\040\134\042\146\057\132\060\133\077\136" +
    "\110\313\112\143\113\142\114\145\115\140\116\151\117" +
    "\152\120\141\121\144\122\137\123\135\124\150\001\002" +
    "\000\016\003\ufff4\015\ufff4\021\ufff4\046\ufff4\052\ufff4\127" +
    "\ufff4\001\002\000\012\003\336\021\uffe3\046\332\052\333" +
    "\001\002\000\006\003\317\127\014\001\002\000\006\106" +
    "\035\111\324\001\002\000\004\110\323\001\002\000\014" +
    "\003\uffeb\021\uffeb\046\uffeb\052\uffeb\127\014\001\002\000" +
    "\014\003\uffe7\021\uffe7\046\uffe7\052\uffe7\127\uffe7\001\002" +
    "\000\014\003\uffe8\021\uffe8\046\uffe8\052\uffe8\127\uffe8\001" +
    "\002\000\012\003\uffea\021\uffea\046\uffea\052\uffea\001\002" +
    "\000\036\005\044\006\046\007\054\010\057\011\053\012" +
    "\051\017\055\031\052\100\061\113\060\125\041\126\042" +
    "\127\014\132\045\001\002\000\006\077\326\110\327\001" +
    "\002\000\060\013\120\033\072\034\125\036\116\037\113" +
    "\041\115\061\101\062\075\063\104\064\077\065\121\066" +
    "\076\067\111\070\123\071\110\100\124\112\114\113\122" +
    "\125\074\126\073\127\014\131\106\132\102\001\002\000" +
    "\014\003\uffe6\021\uffe6\046\uffe6\052\uffe6\127\uffe6\001\002" +
    "\000\044\040\134\042\146\057\132\060\133\077\136\110" +
    "\331\112\143\113\142\114\145\115\140\116\151\117\152" +
    "\120\141\121\144\122\137\123\135\124\150\001\002\000" +
    "\014\003\uffe5\021\uffe5\046\uffe5\052\uffe5\127\uffe5\001\002" +
    "\000\004\127\014\001\002\000\004\127\014\001\002\000" +
    "\012\003\336\021\uffe4\046\332\052\333\001\002\000\012" +
    "\003\uffe1\021\uffe1\046\uffe1\052\uffe1\001\002\000\004\110" +
    "\u0151\001\002\000\004\021\341\001\002\000\004\107\u0150" +
    "\001\002\000\042\003\374\021\341\023\362\027\360\030" +
    "\373\032\u0100\035\356\043\376\047\352\054\350\055\375" +
    "\072\371\073\355\074\366\075\370\127\014\001\002\000" +
    "\130\003\uffcd\004\uffcd\013\uffcd\021\uffcd\022\uffcd\023\uffcd" +
    "\027\uffcd\030\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036" +
    "\uffcd\037\uffcd\041\uffcd\043\uffcd\044\uffcd\047\uffcd\050\uffcd" +
    "\051\uffcd\054\uffcd\055\uffcd\061\uffcd\062\uffcd\063\uffcd\064" +
    "\uffcd\065\uffcd\066\uffcd\067\uffcd\070\uffcd\071\uffcd\072\uffcd" +
    "\073\uffcd\074\uffcd\075\uffcd\100\uffcd\112\uffcd\113\uffcd\125" +
    "\uffcd\126\uffcd\127\uffcd\131\uffcd\132\uffcd\001\002\000\132" +
    "\003\uffd3\004\uffd3\013\uffd3\021\uffd3\022\uffd3\023\uffd3\027" +
    "\uffd3\030\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3" +
    "\037\uffd3\041\uffd3\043\uffd3\044\uffd3\047\uffd3\050\uffd3\051" +
    "\uffd3\054\uffd3\055\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3" +
    "\065\uffd3\066\uffd3\067\uffd3\070\uffd3\071\uffd3\072\uffd3\073" +
    "\uffd3\074\uffd3\075\uffd3\100\uffd3\110\u014f\112\uffd3\113\uffd3" +
    "\125\uffd3\126\uffd3\127\uffd3\131\uffd3\132\uffd3\001\002\000" +
    "\046\003\uffd4\021\uffd4\022\uffd4\023\uffd4\027\uffd4\030\uffd4" +
    "\032\uffd4\035\uffd4\043\uffd4\044\uffd4\047\uffd4\054\uffd4\055" +
    "\uffd4\072\uffd4\073\uffd4\074\uffd4\075\uffd4\127\uffd4\001\002" +
    "\000\012\076\uff80\102\264\107\uff80\110\u014e\001\002\000" +
    "\130\003\uffc5\004\uffc5\013\uffc5\021\uffc5\022\uffc5\023\uffc5" +
    "\027\uffc5\030\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036" +
    "\uffc5\037\uffc5\041\uffc5\043\uffc5\044\uffc5\047\uffc5\050\uffc5" +
    "\051\uffc5\054\uffc5\055\uffc5\061\uffc5\062\uffc5\063\uffc5\064" +
    "\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\071\uffc5\072\uffc5" +
    "\073\uffc5\074\uffc5\075\uffc5\100\uffc5\112\uffc5\113\uffc5\125" +
    "\uffc5\126\uffc5\127\uffc5\131\uffc5\132\uffc5\001\002\000\130" +
    "\003\uffce\004\uffce\013\uffce\021\uffce\022\uffce\023\uffce\027" +
    "\uffce\030\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce" +
    "\037\uffce\041\uffce\043\uffce\044\uffce\047\uffce\050\uffce\051" +
    "\uffce\054\uffce\055\uffce\061\uffce\062\uffce\063\uffce\064\uffce" +
    "\065\uffce\066\uffce\067\uffce\070\uffce\071\uffce\072\uffce\073" +
    "\uffce\074\uffce\075\uffce\100\uffce\112\uffce\113\uffce\125\uffce" +
    "\126\uffce\127\uffce\131\uffce\132\uffce\001\002\000\060\013" +
    "\120\033\072\034\125\036\116\037\113\041\115\061\101" +
    "\062\075\063\104\064\077\065\121\066\076\067\111\070" +
    "\123\071\110\100\124\112\114\113\122\125\074\126\073" +
    "\127\014\131\106\132\102\001\002\000\130\003\uffca\004" +
    "\uffca\013\uffca\021\uffca\022\uffca\023\uffca\027\uffca\030\uffca" +
    "\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\041" +
    "\uffca\043\uffca\044\uffca\047\uffca\050\uffca\051\uffca\054\uffca" +
    "\055\uffca\061\uffca\062\uffca\063\uffca\064\uffca\065\uffca\066" +
    "\uffca\067\uffca\070\uffca\071\uffca\072\uffca\073\uffca\074\uffca" +
    "\075\uffca\100\uffca\112\uffca\113\uffca\125\uffca\126\uffca\127" +
    "\uffca\131\uffca\132\uffca\001\002\000\060\013\120\033\072" +
    "\034\125\036\116\037\113\041\115\061\101\062\075\063" +
    "\104\064\077\065\121\066\076\067\111\070\123\071\110" +
    "\100\124\112\114\113\122\125\074\126\073\127\014\131" +
    "\106\132\102\001\002\000\130\003\uffc6\004\uffc6\013\uffc6" +
    "\021\uffc6\022\uffc6\023\uffc6\027\uffc6\030\uffc6\032\uffc6\033" +
    "\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\041\uffc6\043\uffc6" +
    "\044\uffc6\047\uffc6\050\uffc6\051\uffc6\054\uffc6\055\uffc6\061" +
    "\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6" +
    "\070\uffc6\071\uffc6\072\uffc6\073\uffc6\074\uffc6\075\uffc6\100" +
    "\uffc6\112\uffc6\113\uffc6\125\uffc6\126\uffc6\127\uffc6\131\uffc6" +
    "\132\uffc6\001\002\000\044\003\374\021\341\022\u013a\023" +
    "\362\027\360\030\373\032\u0100\035\356\043\376\047\352" +
    "\054\350\055\375\072\371\073\355\074\366\075\370\127" +
    "\014\001\002\000\004\110\u0139\001\002\000\004\100\u0135" +
    "\001\002\000\130\003\uffcb\004\uffcb\013\uffcb\021\uffcb\022" +
    "\uffcb\023\uffcb\027\uffcb\030\uffcb\032\uffcb\033\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\037\uffcb\041\uffcb\043\uffcb\044\uffcb\047" +
    "\uffcb\050\uffcb\051\uffcb\054\uffcb\055\uffcb\061\uffcb\062\uffcb" +
    "\063\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb\070\uffcb\071" +
    "\uffcb\072\uffcb\073\uffcb\074\uffcb\075\uffcb\100\uffcb\112\uffcb" +
    "\113\uffcb\125\uffcb\126\uffcb\127\uffcb\131\uffcb\132\uffcb\001" +
    "\002\000\004\100\220\001\002\000\130\003\uffcc\004\uffcc" +
    "\013\uffcc\021\uffcc\022\uffcc\023\uffcc\027\uffcc\030\uffcc\032" +
    "\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\041\uffcc" +
    "\043\uffcc\044\uffcc\047\uffcc\050\uffcc\051\uffcc\054\uffcc\055" +
    "\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc" +
    "\067\uffcc\070\uffcc\071\uffcc\072\uffcc\073\uffcc\074\uffcc\075" +
    "\uffcc\100\uffcc\112\uffcc\113\uffcc\125\uffcc\126\uffcc\127\uffcc" +
    "\131\uffcc\132\uffcc\001\002\000\004\127\014\001\002\000" +
    "\006\076\u0125\107\236\001\002\000\130\003\uffd0\004\uffd0" +
    "\013\uffd0\021\uffd0\022\uffd0\023\uffd0\027\uffd0\030\uffd0\032" +
    "\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\041\uffd0" +
    "\043\uffd0\044\uffd0\047\uffd0\050\uffd0\051\uffd0\054\uffd0\055" +
    "\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0" +
    "\067\uffd0\070\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0\075" +
    "\uffd0\100\uffd0\112\uffd0\113\uffd0\125\uffd0\126\uffd0\127\uffd0" +
    "\131\uffd0\132\uffd0\001\002\000\130\003\uffc7\004\uffc7\013" +
    "\uffc7\021\uffc7\022\uffc7\023\uffc7\027\uffc7\030\uffc7\032\uffc7" +
    "\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\041\uffc7\043" +
    "\uffc7\044\uffc7\047\uffc7\050\uffc7\051\uffc7\054\uffc7\055\uffc7" +
    "\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7\067" +
    "\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7\075\uffc7" +
    "\100\uffc7\112\uffc7\113\uffc7\125\uffc7\126\uffc7\127\uffc7\131" +
    "\uffc7\132\uffc7\001\002\000\004\110\u0124\001\002\000\130" +
    "\003\uffd1\004\uffd1\013\uffd1\021\uffd1\022\uffd1\023\uffd1\027" +
    "\uffd1\030\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1" +
    "\037\uffd1\041\uffd1\043\uffd1\044\uffd1\047\uffd1\050\uffd1\051" +
    "\uffd1\054\uffd1\055\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1" +
    "\065\uffd1\066\uffd1\067\uffd1\070\uffd1\071\uffd1\072\uffd1\073" +
    "\uffd1\074\uffd1\075\uffd1\100\uffd1\112\uffd1\113\uffd1\125\uffd1" +
    "\126\uffd1\127\uffd1\131\uffd1\132\uffd1\001\002\000\004\100" +
    "\u0120\001\002\000\004\110\u011f\001\002\000\130\003\uffcf" +
    "\004\uffcf\013\uffcf\021\uffcf\022\uffcf\023\uffcf\027\uffcf\030" +
    "\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf" +
    "\041\uffcf\043\uffcf\044\uffcf\047\uffcf\050\uffcf\051\uffcf\054" +
    "\uffcf\055\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf" +
    "\066\uffcf\067\uffcf\070\uffcf\071\uffcf\072\uffcf\073\uffcf\074" +
    "\uffcf\075\uffcf\100\uffcf\112\uffcf\113\uffcf\125\uffcf\126\uffcf" +
    "\127\uffcf\131\uffcf\132\uffcf\001\002\000\004\100\220\001" +
    "\002\000\004\110\u011c\001\002\000\060\013\120\033\072" +
    "\034\125\036\116\037\113\041\115\061\101\062\075\063" +
    "\104\064\077\065\121\066\076\067\111\070\123\071\110" +
    "\100\124\112\114\113\122\125\074\126\073\127\014\131" +
    "\106\132\102\001\002\000\042\003\374\021\341\023\362" +
    "\027\360\030\373\032\u0100\035\356\043\376\047\352\054" +
    "\350\055\375\072\371\073\355\074\366\075\370\127\014" +
    "\001\002\000\130\003\uffc8\004\uffc8\013\uffc8\021\uffc8\022" +
    "\uffc8\023\uffc8\027\uffc8\030\uffc8\032\uffc8\033\uffc8\034\uffc8" +
    "\035\uffc8\036\uffc8\037\uffc8\041\uffc8\043\uffc8\044\uffc8\047" +
    "\uffc8\050\uffc8\051\uffc8\054\uffc8\055\uffc8\061\uffc8\062\uffc8" +
    "\063\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8\070\uffc8\071" +
    "\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8\100\uffc8\112\uffc8" +
    "\113\uffc8\125\uffc8\126\uffc8\127\uffc8\131\uffc8\132\uffc8\001" +
    "\002\000\004\127\014\001\002\000\130\003\uffc9\004\uffc9" +
    "\013\uffc9\021\uffc9\022\uffc9\023\uffc9\027\uffc9\030\uffc9\032" +
    "\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\041\uffc9" +
    "\043\uffc9\044\uffc9\047\uffc9\050\uffc9\051\uffc9\054\uffc9\055" +
    "\uffc9\061\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9" +
    "\067\uffc9\070\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9\075" +
    "\uffc9\100\uffc9\112\uffc9\113\uffc9\125\uffc9\126\uffc9\127\uffc9" +
    "\131\uffc9\132\uffc9\001\002\000\006\025\u0103\107\236\001" +
    "\002\000\042\003\374\021\341\023\362\027\360\030\373" +
    "\032\u0100\035\356\043\376\047\352\054\350\055\375\072" +
    "\371\073\355\074\366\075\370\127\014\001\002\000\044" +
    "\003\374\021\341\022\u0106\023\362\027\360\030\373\032" +
    "\u0100\035\356\043\376\047\352\054\350\055\375\072\371" +
    "\073\355\074\366\075\370\127\014\001\002\000\046\003" +
    "\uffd5\021\uffd5\022\uffd5\023\uffd5\027\uffd5\030\uffd5\032\uffd5" +
    "\035\uffd5\043\uffd5\044\uffd5\047\uffd5\054\uffd5\055\uffd5\072" +
    "\uffd5\073\uffd5\074\uffd5\075\uffd5\127\uffd5\001\002\000\004" +
    "\110\u0107\001\002\000\130\003\uffc0\004\uffc0\013\uffc0\021" +
    "\uffc0\022\uffc0\023\uffc0\027\uffc0\030\uffc0\032\uffc0\033\uffc0" +
    "\034\uffc0\035\uffc0\036\uffc0\037\uffc0\041\uffc0\043\uffc0\044" +
    "\uffc0\047\uffc0\050\uffc0\051\uffc0\054\uffc0\055\uffc0\061\uffc0" +
    "\062\uffc0\063\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0\070" +
    "\uffc0\071\uffc0\072\uffc0\073\uffc0\074\uffc0\075\uffc0\100\uffc0" +
    "\112\uffc0\113\uffc0\125\uffc0\126\uffc0\127\uffc0\131\uffc0\132" +
    "\uffc0\001\002\000\044\003\374\021\341\023\362\027\360" +
    "\030\373\032\u0100\035\356\043\376\044\u0109\047\352\054" +
    "\350\055\375\072\371\073\355\074\366\075\370\127\014" +
    "\001\002\000\060\013\120\033\072\034\125\036\116\037" +
    "\113\041\115\061\101\062\075\063\104\064\077\065\121" +
    "\066\076\067\111\070\123\071\110\100\124\112\114\113" +
    "\122\125\074\126\073\127\014\131\106\132\102\001\002" +
    "\000\044\040\134\042\146\057\132\060\133\077\136\110" +
    "\u010b\112\143\113\142\114\145\115\140\116\151\117\152" +
    "\120\141\121\144\122\137\123\135\124\150\001\002\000" +
    "\130\003\uffaf\004\uffaf\013\uffaf\021\uffaf\022\uffaf\023\uffaf" +
    "\027\uffaf\030\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036" +
    "\uffaf\037\uffaf\041\uffaf\043\uffaf\044\uffaf\047\uffaf\050\uffaf" +
    "\051\uffaf\054\uffaf\055\uffaf\061\uffaf\062\uffaf\063\uffaf\064" +
    "\uffaf\065\uffaf\066\uffaf\067\uffaf\070\uffaf\071\uffaf\072\uffaf" +
    "\073\uffaf\074\uffaf\075\uffaf\100\uffaf\112\uffaf\113\uffaf\125" +
    "\uffaf\126\uffaf\127\uffaf\131\uffaf\132\uffaf\001\002\000\044" +
    "\040\134\042\146\053\u010d\057\132\060\133\077\136\112" +
    "\143\113\142\114\145\115\140\116\151\117\152\120\141" +
    "\121\144\122\137\123\135\124\150\001\002\000\042\003" +
    "\374\021\341\023\362\027\360\030\373\032\u0100\035\356" +
    "\043\376\047\352\054\350\055\375\072\371\073\355\074" +
    "\366\075\370\127\014\001\002\000\130\003\uffbc\004\u010f" +
    "\013\uffbc\021\uffbc\022\uffbc\023\uffbc\027\uffbc\030\uffbc\032" +
    "\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\041\uffbc" +
    "\043\uffbc\044\uffbc\047\uffbc\050\uffbc\051\u0110\054\uffbc\055" +
    "\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc" +
    "\067\uffbc\070\uffbc\071\uffbc\072\uffbc\073\uffbc\074\uffbc\075" +
    "\uffbc\100\uffbc\112\uffbc\113\uffbc\125\uffbc\126\uffbc\127\uffbc" +
    "\131\uffbc\132\uffbc\001\002\000\060\013\120\033\072\034" +
    "\125\036\116\037\113\041\115\061\101\062\075\063\104" +
    "\064\077\065\121\066\076\067\111\070\123\071\110\100" +
    "\124\112\114\113\122\125\074\126\073\127\014\131\106" +
    "\132\102\001\002\000\042\003\374\021\341\023\362\027" +
    "\360\030\373\032\u0100\035\356\043\376\047\352\054\350" +
    "\055\375\072\371\073\355\074\366\075\370\127\014\001" +
    "\002\000\130\003\uffbb\004\u0112\013\uffbb\021\uffbb\022\uffbb" +
    "\023\uffbb\027\uffbb\030\uffbb\032\uffbb\033\uffbb\034\uffbb\035" +
    "\uffbb\036\uffbb\037\uffbb\041\uffbb\043\uffbb\044\uffbb\047\uffbb" +
    "\050\uffbb\051\u0113\054\uffbb\055\uffbb\061\uffbb\062\uffbb\063" +
    "\uffbb\064\uffbb\065\uffbb\066\uffbb\067\uffbb\070\uffbb\071\uffbb" +
    "\072\uffbb\073\uffbb\074\uffbb\075\uffbb\100\uffbb\112\uffbb\113" +
    "\uffbb\125\uffbb\126\uffbb\127\uffbb\131\uffbb\132\uffbb\001\002" +
    "\000\060\013\120\033\072\034\125\036\116\037\113\041" +
    "\115\061\101\062\075\063\104\064\077\065\121\066\076" +
    "\067\111\070\123\071\110\100\124\112\114\113\122\125" +
    "\074\126\073\127\014\131\106\132\102\001\002\000\042" +
    "\003\374\021\341\023\362\027\360\030\373\032\u0100\035" +
    "\356\043\376\047\352\054\350\055\375\072\371\073\355" +
    "\074\366\075\370\127\014\001\002\000\130\003\uffba\004" +
    "\uffba\013\uffba\021\uffba\022\uffba\023\uffba\027\uffba\030\uffba" +
    "\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\041" +
    "\uffba\043\uffba\044\uffba\047\uffba\050\uffba\051\uffba\054\uffba" +
    "\055\uffba\061\uffba\062\uffba\063\uffba\064\uffba\065\uffba\066" +
    "\uffba\067\uffba\070\uffba\071\uffba\072\uffba\073\uffba\074\uffba" +
    "\075\uffba\100\uffba\112\uffba\113\uffba\125\uffba\126\uffba\127" +
    "\uffba\131\uffba\132\uffba\001\002\000\044\040\134\042\146" +
    "\053\u0116\057\132\060\133\077\136\112\143\113\142\114" +
    "\145\115\140\116\151\117\152\120\141\121\144\122\137" +
    "\123\135\124\150\001\002\000\042\003\374\021\341\023" +
    "\362\027\360\030\373\032\u0100\035\356\043\376\047\352" +
    "\054\350\055\375\072\371\073\355\074\366\075\370\127" +
    "\014\001\002\000\130\003\uffb8\004\uffb8\013\uffb8\021\uffb8" +
    "\022\uffb8\023\uffb8\027\uffb8\030\uffb8\032\uffb8\033\uffb8\034" +
    "\uffb8\035\uffb8\036\uffb8\037\uffb8\041\uffb8\043\uffb8\044\uffb8" +
    "\047\uffb8\050\uffb8\051\uffb8\054\uffb8\055\uffb8\061\uffb8\062" +
    "\uffb8\063\uffb8\064\uffb8\065\uffb8\066\uffb8\067\uffb8\070\uffb8" +
    "\071\uffb8\072\uffb8\073\uffb8\074\uffb8\075\uffb8\100\uffb8\112" +
    "\uffb8\113\uffb8\125\uffb8\126\uffb8\127\uffb8\131\uffb8\132\uffb8" +
    "\001\002\000\130\003\uffb9\004\uffb9\013\uffb9\021\uffb9\022" +
    "\uffb9\023\uffb9\027\uffb9\030\uffb9\032\uffb9\033\uffb9\034\uffb9" +
    "\035\uffb9\036\uffb9\037\uffb9\041\uffb9\043\uffb9\044\uffb9\047" +
    "\uffb9\050\uffb9\051\uffb9\054\uffb9\055\uffb9\061\uffb9\062\uffb9" +
    "\063\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070\uffb9\071" +
    "\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9\100\uffb9\112\uffb9" +
    "\113\uffb9\125\uffb9\126\uffb9\127\uffb9\131\uffb9\132\uffb9\001" +
    "\002\000\044\040\134\042\146\053\u011a\057\132\060\133" +
    "\077\136\112\143\113\142\114\145\115\140\116\151\117" +
    "\152\120\141\121\144\122\137\123\135\124\150\001\002" +
    "\000\042\003\374\021\341\023\362\027\360\030\373\032" +
    "\u0100\035\356\043\376\047\352\054\350\055\375\072\371" +
    "\073\355\074\366\075\370\127\014\001\002\000\130\003" +
    "\uffb7\004\uffb7\013\uffb7\021\uffb7\022\uffb7\023\uffb7\027\uffb7" +
    "\030\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037" +
    "\uffb7\041\uffb7\043\uffb7\044\uffb7\047\uffb7\050\uffb7\051\uffb7" +
    "\054\uffb7\055\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065" +
    "\uffb7\066\uffb7\067\uffb7\070\uffb7\071\uffb7\072\uffb7\073\uffb7" +
    "\074\uffb7\075\uffb7\100\uffb7\112\uffb7\113\uffb7\125\uffb7\126" +
    "\uffb7\127\uffb7\131\uffb7\132\uffb7\001\002\000\130\003\uffc2" +
    "\004\uffc2\013\uffc2\021\uffc2\022\uffc2\023\uffc2\027\uffc2\030" +
    "\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2" +
    "\041\uffc2\043\uffc2\044\uffc2\047\uffc2\050\uffc2\051\uffc2\054" +
    "\uffc2\055\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2" +
    "\066\uffc2\067\uffc2\070\uffc2\071\uffc2\072\uffc2\073\uffc2\074" +
    "\uffc2\075\uffc2\100\uffc2\112\uffc2\113\uffc2\125\uffc2\126\uffc2" +
    "\127\uffc2\131\uffc2\132\uffc2\001\002\000\004\110\u011e\001" +
    "\002\000\130\003\uffab\004\uffab\013\uffab\021\uffab\022\uffab" +
    "\023\uffab\027\uffab\030\uffab\032\uffab\033\uffab\034\uffab\035" +
    "\uffab\036\uffab\037\uffab\041\uffab\043\uffab\044\uffab\047\uffab" +
    "\050\uffab\051\uffab\054\uffab\055\uffab\061\uffab\062\uffab\063" +
    "\uffab\064\uffab\065\uffab\066\uffab\067\uffab\070\uffab\071\uffab" +
    "\072\uffab\073\uffab\074\uffab\075\uffab\100\uffab\112\uffab\113" +
    "\uffab\125\uffab\126\uffab\127\uffab\131\uffab\132\uffab\001\002" +
    "\000\130\003\uffbf\004\uffbf\013\uffbf\021\uffbf\022\uffbf\023" +
    "\uffbf\027\uffbf\030\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf" +
    "\036\uffbf\037\uffbf\041\uffbf\043\uffbf\044\uffbf\047\uffbf\050" +
    "\uffbf\051\uffbf\054\uffbf\055\uffbf\061\uffbf\062\uffbf\063\uffbf" +
    "\064\uffbf\065\uffbf\066\uffbf\067\uffbf\070\uffbf\071\uffbf\072" +
    "\uffbf\073\uffbf\074\uffbf\075\uffbf\100\uffbf\112\uffbf\113\uffbf" +
    "\125\uffbf\126\uffbf\127\uffbf\131\uffbf\132\uffbf\001\002\000" +
    "\004\127\014\001\002\000\004\101\u0122\001\002\000\004" +
    "\110\u0123\001\002\000\130\003\uffaa\004\uffaa\013\uffaa\021" +
    "\uffaa\022\uffaa\023\uffaa\027\uffaa\030\uffaa\032\uffaa\033\uffaa" +
    "\034\uffaa\035\uffaa\036\uffaa\037\uffaa\041\uffaa\043\uffaa\044" +
    "\uffaa\047\uffaa\050\uffaa\051\uffaa\054\uffaa\055\uffaa\061\uffaa" +
    "\062\uffaa\063\uffaa\064\uffaa\065\uffaa\066\uffaa\067\uffaa\070" +
    "\uffaa\071\uffaa\072\uffaa\073\uffaa\074\uffaa\075\uffaa\100\uffaa" +
    "\112\uffaa\113\uffaa\125\uffaa\126\uffaa\127\uffaa\131\uffaa\132" +
    "\uffaa\001\002\000\130\003\uffbd\004\uffbd\013\uffbd\021\uffbd" +
    "\022\uffbd\023\uffbd\027\uffbd\030\uffbd\032\uffbd\033\uffbd\034" +
    "\uffbd\035\uffbd\036\uffbd\037\uffbd\041\uffbd\043\uffbd\044\uffbd" +
    "\047\uffbd\050\uffbd\051\uffbd\054\uffbd\055\uffbd\061\uffbd\062" +
    "\uffbd\063\uffbd\064\uffbd\065\uffbd\066\uffbd\067\uffbd\070\uffbd" +
    "\071\uffbd\072\uffbd\073\uffbd\074\uffbd\075\uffbd\100\uffbd\112" +
    "\uffbd\113\uffbd\125\uffbd\126\uffbd\127\uffbd\131\uffbd\132\uffbd" +
    "\001\002\000\060\013\120\033\072\034\125\036\116\037" +
    "\113\041\115\061\101\062\075\063\104\064\077\065\121" +
    "\066\076\067\111\070\123\071\110\100\124\112\114\113" +
    "\122\125\074\126\073\127\014\131\106\132\102\001\002" +
    "\000\044\040\134\042\146\057\132\060\133\077\136\110" +
    "\u0127\112\143\113\142\114\145\115\140\116\151\117\152" +
    "\120\141\121\144\122\137\123\135\124\150\001\002\000" +
    "\130\003\uffc1\004\uffc1\013\uffc1\021\uffc1\022\uffc1\023\uffc1" +
    "\027\uffc1\030\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036" +
    "\uffc1\037\uffc1\041\uffc1\043\uffc1\044\uffc1\047\uffc1\050\uffc1" +
    "\051\uffc1\054\uffc1\055\uffc1\061\uffc1\062\uffc1\063\uffc1\064" +
    "\uffc1\065\uffc1\066\uffc1\067\uffc1\070\uffc1\071\uffc1\072\uffc1" +
    "\073\uffc1\074\uffc1\075\uffc1\100\uffc1\112\uffc1\113\uffc1\125" +
    "\uffc1\126\uffc1\127\uffc1\131\uffc1\132\uffc1\001\002\000\004" +
    "\076\u0129\001\002\000\060\013\120\033\072\034\125\036" +
    "\116\037\113\041\115\061\101\062\075\063\104\064\077" +
    "\065\121\066\076\067\111\070\123\071\110\100\124\112" +
    "\114\113\122\125\074\126\073\127\014\131\106\132\102" +
    "\001\002\000\046\024\u012c\040\134\042\146\045\u012b\057" +
    "\132\060\133\077\136\112\143\113\142\114\145\115\140" +
    "\116\151\117\152\120\141\121\144\122\137\123\135\124" +
    "\150\001\002\000\060\013\120\033\072\034\125\036\116" +
    "\037\113\041\115\061\101\062\075\063\104\064\077\065" +
    "\121\066\076\067\111\070\123\071\110\100\124\112\114" +
    "\113\122\125\074\126\073\127\014\131\106\132\102\001" +
    "\002\000\060\013\120\033\072\034\125\036\116\037\113" +
    "\041\115\061\101\062\075\063\104\064\077\065\121\066" +
    "\076\067\111\070\123\071\110\100\124\112\114\113\122" +
    "\125\074\126\073\127\014\131\106\132\102\001\002\000" +
    "\044\025\u012e\040\134\042\146\057\132\060\133\077\136" +
    "\112\143\113\142\114\145\115\140\116\151\117\152\120" +
    "\141\121\144\122\137\123\135\124\150\001\002\000\042" +
    "\003\374\021\341\023\362\027\360\030\373\032\u0100\035" +
    "\356\043\376\047\352\054\350\055\375\072\371\073\355" +
    "\074\366\075\370\127\014\001\002\000\130\003\uffae\004" +
    "\uffae\013\uffae\021\uffae\022\uffae\023\uffae\027\uffae\030\uffae" +
    "\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\041" +
    "\uffae\043\uffae\044\uffae\047\uffae\050\uffae\051\uffae\054\uffae" +
    "\055\uffae\061\uffae\062\uffae\063\uffae\064\uffae\065\uffae\066" +
    "\uffae\067\uffae\070\uffae\071\uffae\072\uffae\073\uffae\074\uffae" +
    "\075\uffae\100\uffae\112\uffae\113\uffae\125\uffae\126\uffae\127" +
    "\uffae\131\uffae\132\uffae\001\002\000\044\025\u0131\040\134" +
    "\042\146\057\132\060\133\077\136\112\143\113\142\114" +
    "\145\115\140\116\151\117\152\120\141\121\144\122\137" +
    "\123\135\124\150\001\002\000\042\003\374\021\341\023" +
    "\362\027\360\030\373\032\u0100\035\356\043\376\047\352" +
    "\054\350\055\375\072\371\073\355\074\366\075\370\127" +
    "\014\001\002\000\130\003\uffad\004\uffad\013\uffad\021\uffad" +
    "\022\uffad\023\uffad\027\uffad\030\uffad\032\uffad\033\uffad\034" +
    "\uffad\035\uffad\036\uffad\037\uffad\041\uffad\043\uffad\044\uffad" +
    "\047\uffad\050\uffad\051\uffad\054\uffad\055\uffad\061\uffad\062" +
    "\uffad\063\uffad\064\uffad\065\uffad\066\uffad\067\uffad\070\uffad" +
    "\071\uffad\072\uffad\073\uffad\074\uffad\075\uffad\100\uffad\112" +
    "\uffad\113\uffad\125\uffad\126\uffad\127\uffad\131\uffad\132\uffad" +
    "\001\002\000\004\110\u0134\001\002\000\130\003\uffac\004" +
    "\uffac\013\uffac\021\uffac\022\uffac\023\uffac\027\uffac\030\uffac" +
    "\032\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\041" +
    "\uffac\043\uffac\044\uffac\047\uffac\050\uffac\051\uffac\054\uffac" +
    "\055\uffac\061\uffac\062\uffac\063\uffac\064\uffac\065\uffac\066" +
    "\uffac\067\uffac\070\uffac\071\uffac\072\uffac\073\uffac\074\uffac" +
    "\075\uffac\100\uffac\112\uffac\113\uffac\125\uffac\126\uffac\127" +
    "\uffac\131\uffac\132\uffac\001\002\000\004\127\014\001\002" +
    "\000\006\101\u0137\107\236\001\002\000\004\110\u0138\001" +
    "\002\000\130\003\uffc3\004\uffc3\013\uffc3\021\uffc3\022\uffc3" +
    "\023\uffc3\027\uffc3\030\uffc3\032\uffc3\033\uffc3\034\uffc3\035" +
    "\uffc3\036\uffc3\037\uffc3\041\uffc3\043\uffc3\044\uffc3\047\uffc3" +
    "\050\uffc3\051\uffc3\054\uffc3\055\uffc3\061\uffc3\062\uffc3\063" +
    "\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3\070\uffc3\071\uffc3" +
    "\072\uffc3\073\uffc3\074\uffc3\075\uffc3\100\uffc3\112\uffc3\113" +
    "\uffc3\125\uffc3\126\uffc3\127\uffc3\131\uffc3\132\uffc3\001\002" +
    "\000\130\003\uffbe\004\uffbe\013\uffbe\021\uffbe\022\uffbe\023" +
    "\uffbe\027\uffbe\030\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe" +
    "\036\uffbe\037\uffbe\041\uffbe\043\uffbe\044\uffbe\047\uffbe\050" +
    "\uffbe\051\uffbe\054\uffbe\055\uffbe\061\uffbe\062\uffbe\063\uffbe" +
    "\064\uffbe\065\uffbe\066\uffbe\067\uffbe\070\uffbe\071\uffbe\072" +
    "\uffbe\073\uffbe\074\uffbe\075\uffbe\100\uffbe\112\uffbe\113\uffbe" +
    "\125\uffbe\126\uffbe\127\uffbe\131\uffbe\132\uffbe\001\002\000" +
    "\134\003\uffd6\004\uffd6\013\uffd6\021\uffd6\022\uffd6\023\uffd6" +
    "\027\uffd6\030\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036" +
    "\uffd6\037\uffd6\041\uffd6\043\uffd6\044\uffd6\047\uffd6\050\uffd6" +
    "\051\uffd6\054\uffd6\055\uffd6\061\uffd6\062\uffd6\063\uffd6\064" +
    "\uffd6\065\uffd6\066\uffd6\067\uffd6\070\uffd6\071\uffd6\072\uffd6" +
    "\073\uffd6\074\uffd6\075\uffd6\100\uffd6\107\uffd6\110\uffd6\112" +
    "\uffd6\113\uffd6\125\uffd6\126\uffd6\127\uffd6\131\uffd6\132\uffd6" +
    "\001\002\000\044\020\u013c\040\134\042\146\057\132\060" +
    "\133\077\136\112\143\113\142\114\145\115\140\116\151" +
    "\117\152\120\141\121\144\122\137\123\135\124\150\001" +
    "\002\000\060\013\120\033\072\034\125\036\116\037\113" +
    "\041\115\061\101\062\075\063\104\064\077\065\121\066" +
    "\076\067\111\070\123\071\110\100\124\112\114\113\122" +
    "\125\074\126\073\127\014\131\106\132\102\001\002\000" +
    "\064\013\120\022\u0144\033\072\034\125\036\116\037\113" +
    "\041\115\050\u0142\061\101\062\075\063\104\064\077\065" +
    "\121\066\076\067\111\070\123\071\110\100\124\112\114" +
    "\113\122\125\074\126\073\127\014\131\106\132\102\001" +
    "\002\000\006\106\225\111\u0140\001\002\000\064\013\uffb3" +
    "\022\uffb3\033\uffb3\034\uffb3\036\uffb3\037\uffb3\041\uffb3\050" +
    "\uffb3\061\uffb3\062\uffb3\063\uffb3\064\uffb3\065\uffb3\066\uffb3" +
    "\067\uffb3\070\uffb3\071\uffb3\100\uffb3\112\uffb3\113\uffb3\125" +
    "\uffb3\126\uffb3\127\uffb3\131\uffb3\132\uffb3\001\002\000\042" +
    "\003\374\021\341\023\362\027\360\030\373\032\u0100\035" +
    "\356\043\376\047\352\054\350\055\375\072\371\073\355" +
    "\074\366\075\370\127\014\001\002\000\064\013\uffb2\022" +
    "\uffb2\033\uffb2\034\uffb2\036\uffb2\037\uffb2\041\uffb2\050\uffb2" +
    "\061\uffb2\062\uffb2\063\uffb2\064\uffb2\065\uffb2\066\uffb2\067" +
    "\uffb2\070\uffb2\071\uffb2\100\uffb2\112\uffb2\113\uffb2\125\uffb2" +
    "\126\uffb2\127\uffb2\131\uffb2\132\uffb2\001\002\000\004\111" +
    "\u0149\001\002\000\064\013\uffb4\022\uffb4\033\uffb4\034\uffb4" +
    "\036\uffb4\037\uffb4\041\uffb4\050\uffb4\061\uffb4\062\uffb4\063" +
    "\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\070\uffb4\071\uffb4" +
    "\100\uffb4\112\uffb4\113\uffb4\125\uffb4\126\uffb4\127\uffb4\131" +
    "\uffb4\132\uffb4\001\002\000\004\110\u0148\001\002\000\004" +
    "\022\u0146\001\002\000\004\110\u0147\001\002\000\130\003" +
    "\uffb5\004\uffb5\013\uffb5\021\uffb5\022\uffb5\023\uffb5\027\uffb5" +
    "\030\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037" +
    "\uffb5\041\uffb5\043\uffb5\044\uffb5\047\uffb5\050\uffb5\051\uffb5" +
    "\054\uffb5\055\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065" +
    "\uffb5\066\uffb5\067\uffb5\070\uffb5\071\uffb5\072\uffb5\073\uffb5" +
    "\074\uffb5\075\uffb5\100\uffb5\112\uffb5\113\uffb5\125\uffb5\126" +
    "\uffb5\127\uffb5\131\uffb5\132\uffb5\001\002\000\130\003\uffb6" +
    "\004\uffb6\013\uffb6\021\uffb6\022\uffb6\023\uffb6\027\uffb6\030" +
    "\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6" +
    "\041\uffb6\043\uffb6\044\uffb6\047\uffb6\050\uffb6\051\uffb6\054" +
    "\uffb6\055\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6" +
    "\066\uffb6\067\uffb6\070\uffb6\071\uffb6\072\uffb6\073\uffb6\074" +
    "\uffb6\075\uffb6\100\uffb6\112\uffb6\113\uffb6\125\uffb6\126\uffb6" +
    "\127\uffb6\131\uffb6\132\uffb6\001\002\000\042\003\374\021" +
    "\341\023\362\027\360\030\373\032\u0100\035\356\043\376" +
    "\047\352\054\350\055\375\072\371\073\355\074\366\075" +
    "\370\127\014\001\002\000\004\022\uffb1\001\002\000\044" +
    "\025\u014c\040\134\042\146\057\132\060\133\077\136\112" +
    "\143\113\142\114\145\115\140\116\151\117\152\120\141" +
    "\121\144\122\137\123\135\124\150\001\002\000\042\003" +
    "\374\021\341\023\362\027\360\030\373\032\u0100\035\356" +
    "\043\376\047\352\054\350\055\375\072\371\073\355\074" +
    "\366\075\370\127\014\001\002\000\130\003\uffb0\004\uffb0" +
    "\013\uffb0\021\uffb0\022\uffb0\023\uffb0\027\uffb0\030\uffb0\032" +
    "\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\041\uffb0" +
    "\043\uffb0\044\uffb0\047\uffb0\050\uffb0\051\uffb0\054\uffb0\055" +
    "\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065\uffb0\066\uffb0" +
    "\067\uffb0\070\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0\075" +
    "\uffb0\100\uffb0\112\uffb0\113\uffb0\125\uffb0\126\uffb0\127\uffb0" +
    "\131\uffb0\132\uffb0\001\002\000\130\003\uffc4\004\uffc4\013" +
    "\uffc4\021\uffc4\022\uffc4\023\uffc4\027\uffc4\030\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\041\uffc4\043" +
    "\uffc4\044\uffc4\047\uffc4\050\uffc4\051\uffc4\054\uffc4\055\uffc4" +
    "\061\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4\067" +
    "\uffc4\070\uffc4\071\uffc4\072\uffc4\073\uffc4\074\uffc4\075\uffc4" +
    "\100\uffc4\112\uffc4\113\uffc4\125\uffc4\126\uffc4\127\uffc4\131" +
    "\uffc4\132\uffc4\001\002\000\130\003\uffd2\004\uffd2\013\uffd2" +
    "\021\uffd2\022\uffd2\023\uffd2\027\uffd2\030\uffd2\032\uffd2\033" +
    "\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\041\uffd2\043\uffd2" +
    "\044\uffd2\047\uffd2\050\uffd2\051\uffd2\054\uffd2\055\uffd2\061" +
    "\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2\067\uffd2" +
    "\070\uffd2\071\uffd2\072\uffd2\073\uffd2\074\uffd2\075\uffd2\100" +
    "\uffd2\112\uffd2\113\uffd2\125\uffd2\126\uffd2\127\uffd2\131\uffd2" +
    "\132\uffd2\001\002\000\006\026\ufffd\130\ufffd\001\002\000" +
    "\012\003\uffde\021\uffde\046\uffde\052\uffde\001\002\000\012" +
    "\003\uffe2\021\uffe2\046\uffe2\052\uffe2\001\002\000\006\100" +
    "\u0155\110\uffdb\001\002\000\004\110\u0163\001\002\000\010" +
    "\015\u0158\101\u0157\127\014\001\002\000\006\106\035\111" +
    "\u0161\001\002\000\006\110\uffdc\111\uffdc\001\002\000\004" +
    "\127\014\001\002\000\006\101\uffd9\110\uffd9\001\002\000" +
    "\006\101\u015b\110\u015c\001\002\000\006\110\uffdd\111\uffdd" +
    "\001\002\000\006\015\u0158\127\014\001\002\000\006\101" +
    "\uffda\110\uffda\001\002\000\006\106\035\111\u015f\001\002" +
    "\000\036\005\044\006\046\007\054\010\057\011\053\012" +
    "\051\017\055\031\052\100\061\113\060\125\041\126\042" +
    "\127\014\132\045\001\002\000\006\101\uffd7\110\uffd7\001" +
    "\002\000\036\005\044\006\046\007\054\010\057\011\053" +
    "\012\051\017\055\031\052\100\061\113\060\125\041\126" +
    "\042\127\014\132\045\001\002\000\006\101\uffd8\110\uffd8" +
    "\001\002\000\020\003\ufff0\014\020\015\ufff0\016\ufff0\021" +
    "\ufff0\046\ufff0\052\ufff0\001\002\000\016\003\ufff7\015\ufff7" +
    "\016\023\021\ufff7\046\ufff7\052\ufff7\001\002\000\014\003" +
    "\uffe9\015\315\021\uffe9\046\uffe9\052\uffe9\001\002\000\012" +
    "\003\336\021\uffe3\046\332\052\333\001\002\000\004\021" +
    "\341\001\002\000\004\110\u0169\001\002\000\012\003\uffe0" +
    "\021\uffe0\046\uffe0\052\uffe0\001\002\000\006\100\u0155\111" +
    "\uffdb\001\002\000\004\111\u016c\001\002\000\036\005\044" +
    "\006\046\007\054\010\057\011\053\012\051\017\055\031" +
    "\052\100\061\113\060\125\041\126\042\127\014\132\045" +
    "\001\002\000\004\110\u016e\001\002\000\020\003\ufff0\014" +
    "\020\015\ufff0\016\ufff0\021\ufff0\046\ufff0\052\ufff0\001\002" +
    "\000\016\003\ufff7\015\ufff7\016\023\021\ufff7\046\ufff7\052" +
    "\ufff7\001\002\000\014\003\uffe9\015\315\021\uffe9\046\uffe9" +
    "\052\uffe9\001\002\000\012\003\336\021\uffe3\046\332\052" +
    "\333\001\002\000\004\021\341\001\002\000\004\110\u0174" +
    "\001\002\000\012\003\uffdf\021\uffdf\046\uffdf\052\uffdf\001" +
    "\002\000\010\077\u017c\106\035\111\u017b\001\002\000\004" +
    "\110\u017a\001\002\000\020\003\ufff2\015\ufff2\016\ufff2\021" +
    "\ufff2\046\ufff2\052\ufff2\127\014\001\002\000\020\003\uffee" +
    "\015\uffee\016\uffee\021\uffee\046\uffee\052\uffee\127\uffee\001" +
    "\002\000\020\003\uffef\015\uffef\016\uffef\021\uffef\046\uffef" +
    "\052\uffef\127\uffef\001\002\000\016\003\ufff1\015\ufff1\016" +
    "\ufff1\021\ufff1\046\ufff1\052\ufff1\001\002\000\036\005\044" +
    "\006\046\007\054\010\057\011\053\012\051\017\055\031" +
    "\052\100\061\113\060\125\041\126\042\127\014\132\045" +
    "\001\002\000\036\005\044\006\046\007\054\010\057\011" +
    "\053\012\051\017\055\031\052\100\061\113\060\125\041" +
    "\126\042\127\014\132\045\001\002\000\004\110\u017e\001" +
    "\002\000\020\003\uffed\015\uffed\016\uffed\021\uffed\046\uffed" +
    "\052\uffed\127\uffed\001\002\000\004\110\u0180\001\002\000" +
    "\020\003\uffec\015\uffec\016\uffec\021\uffec\046\uffec\052\uffec" +
    "\127\uffec\001\002\000\006\106\035\110\u0184\001\002\000" +
    "\004\110\u0183\001\002\000\020\003\ufffb\014\ufffb\015\ufffb" +
    "\016\ufffb\021\ufffb\046\ufffb\052\ufffb\001\002\000\020\003" +
    "\ufffc\014\ufffc\015\ufffc\016\ufffc\021\ufffc\046\ufffc\052\ufffc" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0182\000\010\002\005\003\004\004\006\001\001\000" +
    "\004\073\012\001\001\000\004\004\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\016\001\001\000\006\071\u0180\073\023\001" +
    "\001\000\004\011\020\001\001\000\012\012\u0176\013\u0177" +
    "\071\u0174\073\023\001\001\000\004\006\021\001\001\000" +
    "\004\014\313\001\001\000\012\007\027\010\026\071\024" +
    "\073\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\030\071\024" +
    "\073\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\060\307\061\036\062\042\063\055\064\037\073\046" +
    "\001\001\000\016\060\047\061\036\062\042\063\055\064" +
    "\037\073\046\001\001\000\004\073\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\067\274\070\275" +
    "\071\276\073\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\071\061\073\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\052\106\053\070\054\067\055\077\057" +
    "\102\065\066\066\111\072\116\073\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\056\216\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\052\202\053\070\054" +
    "\067\055\077\057\102\072\116\073\104\001\001\000\020" +
    "\052\201\053\070\054\067\055\077\057\102\072\116\073" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\052\175\053\070\054" +
    "\067\055\077\057\102\072\116\073\104\001\001\000\002" +
    "\001\001\000\020\052\130\053\070\054\067\055\077\057" +
    "\102\072\116\073\104\001\001\000\002\001\001\000\004" +
    "\073\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\052\171\053\070\054\067\055\077" +
    "\057\102\072\116\073\104\001\001\000\020\052\170\053" +
    "\070\054\067\055\077\057\102\072\116\073\104\001\001" +
    "\000\020\052\167\053\070\054\067\055\077\057\102\072" +
    "\116\073\104\001\001\000\020\052\166\053\070\054\067" +
    "\055\077\057\102\072\116\073\104\001\001\000\020\052" +
    "\165\053\070\054\067\055\077\057\102\072\116\073\104" +
    "\001\001\000\020\052\164\053\070\054\067\055\077\057" +
    "\102\072\116\073\104\001\001\000\020\052\163\053\070" +
    "\054\067\055\077\057\102\072\116\073\104\001\001\000" +
    "\020\052\162\053\070\054\067\055\077\057\102\072\116" +
    "\073\104\001\001\000\020\052\161\053\070\054\067\055" +
    "\077\057\102\072\116\073\104\001\001\000\020\052\160" +
    "\053\070\054\067\055\077\057\102\072\116\073\104\001" +
    "\001\000\020\052\157\053\070\054\067\055\077\057\102" +
    "\072\116\073\104\001\001\000\020\052\156\053\070\054" +
    "\067\055\077\057\102\072\116\073\104\001\001\000\020" +
    "\052\155\053\070\054\067\055\077\057\102\072\116\073" +
    "\104\001\001\000\002\001\001\000\020\052\154\053\070" +
    "\054\067\055\077\057\102\072\116\073\104\001\001\000" +
    "\020\052\153\053\070\054\067\055\077\057\102\072\116" +
    "\073\104\001\001\000\020\052\152\053\070\054\067\055" +
    "\077\057\102\072\116\073\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\052\173\053" +
    "\070\054\067\055\077\057\102\072\116\073\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\052\177\053\070\054\067\055\077\057\102\072\116" +
    "\073\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\052\204\053\070" +
    "\054\067\055\077\057\102\072\116\073\104\001\001\000" +
    "\002\001\001\000\020\052\206\053\070\054\067\055\077" +
    "\057\102\072\116\073\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\052\211\053\070\054\067\055\077" +
    "\057\102\072\116\073\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\052\214\053\070\054\067\055\077" +
    "\057\102\072\116\073\104\001\001\000\002\001\001\000" +
    "\022\051\226\052\221\053\070\054\067\055\077\057\102" +
    "\072\116\073\104\001\001\000\002\001\001\000\022\051" +
    "\222\052\221\053\070\054\067\055\077\057\102\072\116" +
    "\073\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\052\225\053\070" +
    "\054\067\055\077\057\102\072\116\073\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\052\231\053\070\054\067\055\077\057\102\072\116\073" +
    "\104\001\001\000\002\001\001\000\020\052\233\053\070" +
    "\054\067\055\077\057\102\072\116\073\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\073\236\001\001" +
    "\000\002\001\001\000\022\051\240\052\221\053\070\054" +
    "\067\055\077\057\102\072\116\073\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\052\243\053\070\054" +
    "\067\055\077\057\102\072\116\073\104\001\001\000\002" +
    "\001\001\000\020\052\245\053\070\054\067\055\077\057" +
    "\102\072\116\073\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\052\250\053\070\054\067\055\077\057" +
    "\102\072\116\073\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\052\253\053\070\054\067\055\077\057" +
    "\102\072\116\073\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\052\256\053\070\054\067\055\077\057" +
    "\102\072\116\073\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\052\261\053\070\054\067\055\077\057" +
    "\102\072\116\073\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\051\264\052\221\053\070\054\067\055" +
    "\077\057\102\072\116\073\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\052\106\053" +
    "\070\054\067\055\077\057\102\066\270\072\116\073\104" +
    "\001\001\000\002\001\001\000\012\062\273\063\272\064" +
    "\037\073\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\070\302\071\276\073\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\060\300\061\036\062\042" +
    "\063\055\064\037\073\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\061\306\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\052\311\053\070\054\067\055\077" +
    "\057\102\072\116\073\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\336\020\333\021\334\001\001" +
    "\000\012\015\317\016\320\071\315\073\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\321\071\315" +
    "\073\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\060\324\061\036\062\042\063\055" +
    "\064\037\073\046\001\001\000\002\001\001\000\020\052" +
    "\327\053\070\054\067\055\077\057\102\072\116\073\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\073\u0169\001\001\000\004\073\u0152\001\001" +
    "\000\004\021\u0151\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\337\001\001\000\002\001\001\000\050" +
    "\025\342\026\353\027\343\030\366\031\363\032\371\033" +
    "\346\034\341\035\360\037\356\043\350\044\u0100\045\376" +
    "\046\364\047\352\050\345\054\344\057\362\073\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\052\u014a\053\070\054\067\055\077\057\102\072\116" +
    "\073\104\001\001\000\002\001\001\000\020\052\u013a\053" +
    "\070\054\067\055\077\057\102\072\116\073\104\001\001" +
    "\000\002\001\001\000\046\025\342\027\u0104\030\366\031" +
    "\363\032\371\033\346\034\341\035\360\037\356\043\350" +
    "\044\u0100\045\376\046\364\047\352\050\345\054\344\057" +
    "\362\073\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\u0132\001\001\000\002\001" +
    "\001\000\004\073\u0127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\056\u011c\001\001\000\002\001\001\000\020\052" +
    "\u010b\053\070\054\067\055\077\057\102\072\116\073\104" +
    "\001\001\000\050\025\342\026\u0107\027\343\030\366\031" +
    "\363\032\371\033\346\034\341\035\360\037\356\043\350" +
    "\044\u0100\045\376\046\364\047\352\050\345\054\344\057" +
    "\362\073\104\001\001\000\002\001\001\000\010\054\067" +
    "\057\u0101\073\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\025\342\026\u0103\027\343\030\366\031\363" +
    "\032\371\033\346\034\341\035\360\037\356\043\350\044" +
    "\u0100\045\376\046\364\047\352\050\345\054\344\057\362" +
    "\073\104\001\001\000\046\025\342\027\u0104\030\366\031" +
    "\363\032\371\033\346\034\341\035\360\037\356\043\350" +
    "\044\u0100\045\376\046\364\047\352\050\345\054\344\057" +
    "\362\073\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\025\342\027\u0104\030\366\031" +
    "\363\032\371\033\346\034\341\035\360\037\356\043\350" +
    "\044\u0100\045\376\046\364\047\352\050\345\054\344\057" +
    "\362\073\104\001\001\000\020\052\u0109\053\070\054\067" +
    "\055\077\057\102\072\116\073\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\025\342" +
    "\027\u010d\030\366\031\363\032\371\033\346\034\341\035" +
    "\360\037\356\043\350\044\u0100\045\376\046\364\047\352" +
    "\050\345\054\344\057\362\073\104\001\001\000\004\036" +
    "\u0110\001\001\000\020\052\u0118\053\070\054\067\055\077" +
    "\057\102\072\116\073\104\001\001\000\046\025\342\027" +
    "\u0117\030\366\031\363\032\371\033\346\034\341\035\360" +
    "\037\356\043\350\044\u0100\045\376\046\364\047\352\050" +
    "\345\054\344\057\362\073\104\001\001\000\002\001\001" +
    "\000\020\052\u0114\053\070\054\067\055\077\057\102\072" +
    "\116\073\104\001\001\000\046\025\342\027\u0113\030\366" +
    "\031\363\032\371\033\346\034\341\035\360\037\356\043" +
    "\350\044\u0100\045\376\046\364\047\352\050\345\054\344" +
    "\057\362\073\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\025\342\027\u0116\030\366\031\363\032\371" +
    "\033\346\034\341\035\360\037\356\043\350\044\u0100\045" +
    "\376\046\364\047\352\050\345\054\344\057\362\073\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\025\342\027\u011a\030\366\031\363\032\371" +
    "\033\346\034\341\035\360\037\356\043\350\044\u0100\045" +
    "\376\046\364\047\352\050\345\054\344\057\362\073\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\073\u0120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\052\u0125\053\070\054\067" +
    "\055\077\057\102\072\116\073\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\052\u0129" +
    "\053\070\054\067\055\077\057\102\072\116\073\104\001" +
    "\001\000\002\001\001\000\020\052\u012f\053\070\054\067" +
    "\055\077\057\102\072\116\073\104\001\001\000\020\052" +
    "\u012c\053\070\054\067\055\077\057\102\072\116\073\104" +
    "\001\001\000\002\001\001\000\046\025\342\027\u012e\030" +
    "\366\031\363\032\371\033\346\034\341\035\360\037\356" +
    "\043\350\044\u0100\045\376\046\364\047\352\050\345\054" +
    "\344\057\362\073\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\025\342\027\u0131\030\366\031\363\032" +
    "\371\033\346\034\341\035\360\037\356\043\350\044\u0100" +
    "\045\376\046\364\047\352\050\345\054\344\057\362\073" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\054\067\057\u0135\073\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\040" +
    "\u013c\041\u013e\051\u013d\052\221\053\070\054\067\055\077" +
    "\057\102\072\116\073\104\001\001\000\026\041\u0142\042" +
    "\u0144\051\u013d\052\221\053\070\054\067\055\077\057\102" +
    "\072\116\073\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\025\342\027\u0140\030\366\031\363\032\371" +
    "\033\346\034\341\035\360\037\356\043\350\044\u0100\045" +
    "\376\046\364\047\352\050\345\054\344\057\362\073\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\025\342\027" +
    "\u0149\030\366\031\363\032\371\033\346\034\341\035\360" +
    "\037\356\043\350\044\u0100\045\376\046\364\047\352\050" +
    "\345\054\344\057\362\073\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\025\342\027\u014c\030\366\031" +
    "\363\032\371\033\346\034\341\035\360\037\356\043\350" +
    "\044\u0100\045\376\046\364\047\352\050\345\054\344\057" +
    "\362\073\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\u0153\001\001\000\002\001\001" +
    "\000\012\023\u0159\024\u0158\071\u0155\073\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\071\u015d\073\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\024\u015c\071\u0155\073\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\060\u015f\061\036\062" +
    "\042\063\055\064\037\073\046\001\001\000\002\001\001" +
    "\000\016\060\u0161\061\036\062\042\063\055\064\037\073" +
    "\046\001\001\000\002\001\001\000\004\011\u0163\001\001" +
    "\000\004\006\u0164\001\001\000\004\014\u0165\001\001\000" +
    "\010\017\u0166\020\333\021\334\001\001\000\004\025\u0167" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\u016a\001\001\000\002\001\001\000\016\060\u016c\061\036" +
    "\062\042\063\055\064\037\073\046\001\001\000\002\001" +
    "\001\000\004\011\u016e\001\001\000\004\006\u016f\001\001" +
    "\000\004\014\u0170\001\001\000\010\017\u0171\020\333\021" +
    "\334\001\001\000\004\025\u0172\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\013\u0178\071\u0174\073\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\060\u017e\061" +
    "\036\062\042\063\055\064\037\073\046\001\001\000\016" +
    "\060\u017c\061\036\062\042\063\055\064\037\073\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String archivo;
	public ArrayList<PreProgram> preprogramas = null;
    public Ubicacion u(int l, int r) {
    	return new Ubicacion(l + 1, r + 1, archivo);
    }
    public Parser(java_cup.runtime.Scanner s, String archivo) {
        super(s);
        this.archivo = archivo;
    }
    @Override
	public void syntax_error(Symbol cur_token) {
        if (cur_token.value != null) {
            int fi = cur_token.right + 1;
            int ci = cur_token.left + 1;
            int ff = cur_token.right + 1;
            int cf = cur_token.left + cur_token.value.toString().length() + 1;
            Control.error(Constantes.SINTACTICO, new Ubicacion(fi, ci, archivo), "No se esperaba: " + cur_token.value);
        }
    }

    @Override
    public void unrecovered_syntax_error(Symbol cur_token) {
		if (cur_token.value != null) {
            int fi = cur_token.right + 1;
            int ci = cur_token.left + 1;
            int ff = cur_token.right + 1;
            int cf = cur_token.left + cur_token.value.toString().length() + 1;
            Control.error(Constantes.SINTACTICO, new Ubicacion(fi, ci, archivo), "No se esperaba: " + cur_token.value);
        }
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {




  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // ID ::= nIdentificador 
            {
              Id RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Id(a.toLowerCase(), parser.u(aright, aleft));
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ID",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // ATOMO ::= tNil 
            {
              Atomo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Atomo(a, Constantes.NIL, parser.u(aright, aleft));
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMO",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // ATOMO ::= tFalse 
            {
              Atomo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Atomo(Constantes.FALSE, Constantes.BOOLEAN, parser.u(aright, aleft));
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMO",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // ATOMO ::= tTrue 
            {
              Atomo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Atomo(Constantes.TRUE, Constantes.BOOLEAN, parser.u(aright, aleft));
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMO",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // ATOMO ::= nCadena 
            {
              Atomo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Atomo(a, Constantes.STRING, parser.u(aright, aleft));
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMO",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // ATOMO ::= nCaracter 
            {
              Atomo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character a = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Atomo(a + "", Constantes.CHAR, parser.u(aright, aleft));
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMO",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // ATOMO ::= nDecimal 
            {
              Atomo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Atomo(a, Constantes.REAL, parser.u(aright, aleft));
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMO",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // ATOMO ::= nEntero 
            {
              Atomo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Atomo(a, Constantes.INTEGER, parser.u(aright, aleft));
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATOMO",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // IDS ::= ID 
            {
              ArrayList<Id> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Id a = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            ArrayList<Id> ids = new ArrayList<>();
            ids.add(a);
            RESULT = ids;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDS",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // IDS ::= IDS tComa ID 
            {
              ArrayList<Id> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Id> a = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Id b = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            a.add(b);
            RESULT = a;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDS",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // CAMPO ::= IDS tDospuntos TIPO_DEF tPuntocoma 
            {
              PreCampo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<Id> a = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		PreTipo b = (PreTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new PreCampo(a, b);  
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CAMPO",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // CAMPOS ::= CAMPO 
            {
              ArrayList<PreCampo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PreCampo a = (PreCampo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                ArrayList<PreCampo> ca = new ArrayList<>();
                ca.add(a);
                RESULT = ca;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CAMPOS",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // CAMPOS ::= CAMPOS CAMPO 
            {
              ArrayList<PreCampo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<PreCampo> a = (ArrayList<PreCampo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PreCampo b = (PreCampo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                a.add(b);
                RESULT = a;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CAMPOS",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // DIMENSION ::= EXP 
            {
              PreDimension RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new PreDimension2(a);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIMENSION",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // DIMENSION ::= EXP tDosp EXP 
            {
              PreDimension RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new PreDimension1(a, b);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIMENSION",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // DIMENSIONES ::= DIMENSION 
            {
              ArrayList<PreDimension> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PreDimension a = (PreDimension)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    ArrayList<PreDimension> dims = new ArrayList<>();
                    dims.add(a);
                    RESULT = dims;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // DIMENSIONES ::= DIMENSIONES tComa DIMENSION 
            {
              ArrayList<PreDimension> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<PreDimension> a = (ArrayList<PreDimension>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PreDimension b = (PreDimension)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    a.add(b);
                    RESULT = a;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // PRIMITIVO ::= tBoolean 
            {
              PrePrimitivo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new PrePrimitivo(parser.u(aright, aleft), Constantes.BOOLEAN);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // PRIMITIVO ::= tString 
            {
              PrePrimitivo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new PrePrimitivo(parser.u(aright, aleft), Constantes.STRING);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // PRIMITIVO ::= tWord 
            {
              PrePrimitivo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new PrePrimitivo(parser.u(aright, aleft), Constantes.WORD);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // PRIMITIVO ::= tChar 
            {
              PrePrimitivo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new PrePrimitivo(parser.u(aright, aleft), Constantes.CHAR);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // PRIMITIVO ::= tReal 
            {
              PrePrimitivo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new PrePrimitivo(parser.u(aright, aleft), Constantes.REAL);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // PRIMITIVO ::= tInteger 
            {
              PrePrimitivo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new PrePrimitivo(parser.u(aright, aleft), Constantes.INTEGER);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRIMITIVO",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ARRAY ::= tArray tIcor DIMENSIONES tDcor tOf TIPO_SIMPLE 
            {
              PreArreglo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<PreDimension> b = (ArrayList<PreDimension>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PreTipo c = (PreTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new PreArreglo(parser.u(aright, aleft), b, c);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ARRAY ::= tArray tIcor DIMENSIONES tDcor tOf ARRAY 
            {
              PreArreglo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<PreDimension> b = (ArrayList<PreDimension>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PreArreglo c = (PreArreglo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            c.ubicacion = parser.u(aright, aleft);
            b.addAll(c.predimensiones);
            c.predimensiones = b;
            RESULT = c;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAY",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // TIPO_SIMPLE ::= PRIMITIVO 
            {
              PreTipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PrePrimitivo a = (PrePrimitivo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = a;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // TIPO_SIMPLE ::= ID 
            {
              PreTipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Id a = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = new PreTipoId(a);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_SIMPLE",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // VALOR_RANGO ::= nCaracter 
            {
              Atomo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character a = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new Atomo(a + "", Constantes.CHAR, parser.u(aright, aleft));
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR_RANGO",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // VALOR_RANGO ::= tResta nDecimal 
            {
              Atomo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new Atomo("-"+a, Constantes.REAL, parser.u(aright, aleft));
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR_RANGO",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // VALOR_RANGO ::= nDecimal 
            {
              Atomo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new Atomo(a, Constantes.REAL, parser.u(aright, aleft));
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR_RANGO",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // VALOR_RANGO ::= tResta nEntero 
            {
              Atomo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new Atomo("-"+a, Constantes.INTEGER, parser.u(aright, aleft));
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR_RANGO",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // VALOR_RANGO ::= nEntero 
            {
              Atomo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new Atomo(a, Constantes.INTEGER, parser.u(aright, aleft));
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR_RANGO",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // TIPO_DEF ::= VALOR_RANGO tTresp VALOR_RANGO 
            {
              PreTipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Atomo a = (Atomo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Atomo b = (Atomo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new PreRango(a, b);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_DEF",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // TIPO_DEF ::= ARRAY 
            {
              PreTipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PreArreglo a = (PreArreglo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = a;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_DEF",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // TIPO_DEF ::= tRecord CAMPOS tEnd 
            {
              PreTipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<PreCampo> b = (ArrayList<PreCampo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new PreRecord(parser.u(aright, aleft), b);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_DEF",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // TIPO_DEF ::= tIpar IDS tDpar 
            {
              PreTipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Id> b = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new PreEnumeracion(parser.u(aright, aleft), b);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_DEF",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // TIPO_DEF ::= TIPO_SIMPLE 
            {
              PreTipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PreTipo a = (PreTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = a;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_DEF",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // LLAMADA ::= ID BLOQUE_ARGUMENTOS 
            {
              Elemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Id a = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Expresion> b = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new Llamada(a, b);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ACCESO ::= ACCESO tPunto ID tIcor EXPS tDcor 
            {
              Acceso RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Acceso a = (Acceso)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Id b = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Expresion> c = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                a.elementos.add(new AccesoArreglo(b, c));
                RESULT = a;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ACCESO",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ACCESO ::= ACCESO tPunto ID 
            {
              Acceso RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Acceso a = (Acceso)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Id b = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                a.elementos.add(new Identificador(b));
                RESULT = a;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ACCESO",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ACCESO ::= LLAMADA tIcor EXPS tDcor 
            {
              Acceso RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Elemento a = (Elemento)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Expresion> b = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                //RESULT = new Acceso(a);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ACCESO",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ACCESO ::= LLAMADA 
            {
              Acceso RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Elemento a = (Elemento)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new Acceso(a);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ACCESO",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ACCESO ::= ID tIcor EXPS tDcor 
            {
              Acceso RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Id a = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Expresion> b = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new Acceso(new AccesoArreglo(a, b));
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ACCESO",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ACCESO ::= ID 
            {
              Acceso RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Id a = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new Acceso(new Identificador(a));
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ACCESO",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // BLOQUE_ARGUMENTOS ::= tIpar tDpar 
            {
              ArrayList<Expresion> RESULT =null;
		
                        RESULT = new ArrayList<>();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_ARGUMENTOS",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // BLOQUE_ARGUMENTOS ::= tIpar EXPS tDpar 
            {
              ArrayList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Expresion> a = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = a;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_ARGUMENTOS",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NATIVA ::= tRound tIpar EXP tDpar 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new NRound(parser.u(aright, aleft), b);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NATIVA",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NATIVA ::= tTrunk tIpar EXP tDpar 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new NTrunk(parser.u(aright, aleft), b);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NATIVA",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NATIVA ::= tEquals tIpar EXP tComa EXP tDpar 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new NEquals(parser.u(aright, aleft), b, c);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NATIVA",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NATIVA ::= tTouppercase tIpar EXP tDpar 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new NTouppercase(parser.u(aright, aleft), b);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NATIVA",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NATIVA ::= tTolowercase tIpar EXP tDpar 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new NTolowercase(parser.u(aright, aleft), b);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NATIVA",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NATIVA ::= tTochararray tIpar EXP tDpar 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new NTochararray(parser.u(aright, aleft), b);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NATIVA",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NATIVA ::= tReplace tIpar EXP tComa EXP tDpar 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new NReplace(parser.u(aright, aleft), b, c);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NATIVA",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NATIVA ::= tLength tIpar EXP tDpar 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new NLength(parser.u(aright, aleft), b);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NATIVA",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NATIVA ::= tCharat tIpar EXP tComa EXP tDpar 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new NCharat(parser.u(aright, aleft), b, c);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NATIVA",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NATIVA ::= tMalloc tIpar EXP tDpar 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new NMalloc(parser.u(aright, aleft), b);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NATIVA",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NATIVA ::= tSizeof tIpar ID tDpar 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Id b = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new NSizeof(parser.u(aright, aleft), b);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NATIVA",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // VAL ::= NATIVA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = a;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAL",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // VAL ::= ACCESO 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Acceso a = (Acceso)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = a;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAL",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // VAL ::= ATOMO 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Atomo a = (Atomo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = a;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAL",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXP ::= VAL 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = a;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXP ::= tIpar EXP tDpar 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = a;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXP ::= tResta EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Restau(a);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXP ::= tSuma EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = a;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXP ::= EXP tPotencia EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Potencia(a, b);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXP ::= EXP tModulo EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Modulo(a, b);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXP ::= EXP tDivision EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Division(a, b);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXP ::= EXP tMultiplicacion EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Multiplicacion(a, b);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXP ::= EXP tResta EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Resta(a, b);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXP ::= EXP tSuma EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Suma(a, b);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXP ::= EXP tMenorigual EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new RelacionalSimple(a, b, "jle");
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP ::= EXP tMayorigual EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new RelacionalSimple(a, b, "jge");
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP ::= EXP tMenor EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new RelacionalSimple(a, b, "jl");
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP ::= EXP tMayor EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new RelacionalSimple(a, b, "jg");
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP ::= EXP tDistinto EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Distinto(a, b);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP ::= EXP tIgual EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Igual(a, b);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP ::= tNot EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Not(a);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXP ::= EXP tAnd EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new And(a, b);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXP ::= EXP tNor EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Nor(a, b);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP ::= EXP tNand EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Nand(a, b);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP ::= EXP tOr EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Or(a, b);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPS ::= EXP 
            {
              ArrayList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            ArrayList<Expresion> exps = new ArrayList<>();
            exps.add(a);
            RESULT = exps;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPS",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPS ::= EXPS tComa EXP 
            {
              ArrayList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Expresion> a = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            a.add(b);
            RESULT = a;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPS",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // READ ::= tRead tIpar ID tDpar tPuntocoma 
            {
              Read RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Id a = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
            RESULT = new Read(a);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // WRITELN ::= tWriteln BLOQUE_ARGUMENTOS tPuntocoma 
            {
              Writeln RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Expresion> a = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new Writeln(a);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WRITELN",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // WRITE ::= tWrite BLOQUE_ARGUMENTOS tPuntocoma 
            {
              Write RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Expresion> a = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new WriteSimple(a);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WRITE",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // FOR ::= tFor ID tAsignacion EXP tDownto EXP tDo INSTRUCCION 
            {
              For RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Id a = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            ArrayList<Instruccion> ins;
            if(d instanceof BloqueInstrucciones) {
                ins = ((BloqueInstrucciones)d).instrucciones;
            } else {
                ins = new ArrayList<>();
                ins.add(d);
            }
            RESULT = new For(a, b, c, false, ins);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FOR ::= tFor ID tAsignacion EXP tTo EXP tDo INSTRUCCION 
            {
              For RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Id a = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            ArrayList<Instruccion> ins;
            if(d instanceof BloqueInstrucciones) {
                ins = ((BloqueInstrucciones)d).instrucciones;
            } else {
                ins = new ArrayList<>();
                ins.add(d);
            }
            RESULT = new For(a, b, c, true, ins);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // REPEAT ::= tRepeat INSTRUCCIONES tUntil EXP tPuntocoma 
            {
              Repeat RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<Instruccion> a = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new Repeat(a, b);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REPEAT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // WHILE ::= tWhile EXP tDo INSTRUCCION 
            {
              While RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            ArrayList<Instruccion> ins;
            if(b instanceof BloqueInstrucciones) {
                ins = ((BloqueInstrucciones)b).instrucciones;
            } else {
                ins = new ArrayList<>();
                ins.add(b);
            }
            RESULT = new While(a, ins);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DEFAULT ::= tDefault tDospuntos INSTRUCCION 
            {
              ArrayList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                ArrayList<Instruccion> ins;
                if(a instanceof BloqueInstrucciones) {
                    ins = ((BloqueInstrucciones)a).instrucciones;
                } else {
                    ins = new ArrayList<>();
                    ins.add(a);
                }
                RESULT = ins;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CASO ::= EXPS tDospuntos INSTRUCCION 
            {
              Case RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Expresion> a = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            ArrayList<Instruccion> ins;
            if(b instanceof BloqueInstrucciones) {
                ins = ((BloqueInstrucciones)b).instrucciones;
            } else {
                ins = new ArrayList<>();
                ins.add(b);
            }
            RESULT = new Case(a, ins);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASO",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CASOS ::= CASO 
            {
              ArrayList<Case> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Case a = (Case)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            ArrayList<Case> casos = new ArrayList<>();
            casos.add(a);
            RESULT = casos;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASOS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CASOS ::= CASOS CASO 
            {
              ArrayList<Case> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Case> a = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Case b = (Case)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            a.add(b);
            RESULT = a;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASOS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SWITCH ::= tCase EXP tOf CASOS DEFAULT tEnd tPuntocoma 
            {
              Switch RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<Case> b = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Instruccion> c = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                RESULT = new Switch(a, b, c);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SWITCH ::= tCase EXP tOf CASOS tEnd tPuntocoma 
            {
              Switch RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Case> b = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                RESULT = new Switch(a, b, new ArrayList<>());
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ELSEIFS ::= tElseif EXP tThen INSTRUCCION 
            {
              ArrayList<Sif> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                ArrayList<Instruccion> ins;
                if(b instanceof BloqueInstrucciones) {
                    ins = ((BloqueInstrucciones)b).instrucciones;
                } else {
                    ins = new ArrayList<>();
                    ins.add(b);
                }
                ArrayList<Sif> sifs = new ArrayList<>();
                sifs.add(new Sif(a, ins));
                RESULT = sifs;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSEIFS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ELSEIFS ::= ELSEIFS tElseif EXP tThen INSTRUCCION 
            {
              ArrayList<Sif> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<Sif> a = (ArrayList<Sif>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                ArrayList<Instruccion> ins;
                if(c instanceof BloqueInstrucciones) {
                    ins = ((BloqueInstrucciones)c).instrucciones;
                } else {
                    ins = new ArrayList<>();
                    ins.add(c);
                }
                a.add(new Sif(b, ins));
                RESULT = a;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSEIFS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // IF ::= tIf EXP tThen INSTRUCCION tElse INSTRUCCION 
            {
              If RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            ArrayList<Instruccion> ins1;
            if(b instanceof BloqueInstrucciones) {
                ins1 = ((BloqueInstrucciones)b).instrucciones;
            } else {
                ins1 = new ArrayList<>();
                ins1.add(b);
            }
            ArrayList<Instruccion> ins2;
            if(c instanceof BloqueInstrucciones) {
                ins2 = ((BloqueInstrucciones)c).instrucciones;
            } else {
                ins2 = new ArrayList<>();
                ins2.add(c);
            }
            RESULT = new If(new Sif(a, ins1), new ArrayList<>(), ins2);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // IF ::= tIf EXP tThen INSTRUCCION ELSEIFS tElse INSTRUCCION 
            {
              If RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Sif> c = (ArrayList<Sif>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            ArrayList<Instruccion> ins1;
            if(b instanceof BloqueInstrucciones) {
                ins1 = ((BloqueInstrucciones)b).instrucciones;
            } else {
                ins1 = new ArrayList<>();
                ins1.add(b);
            }
            ArrayList<Instruccion> ins2;
            if(d instanceof BloqueInstrucciones) {
                ins2 = ((BloqueInstrucciones)d).instrucciones;
            } else {
                ins2 = new ArrayList<>();
                ins2.add(d);
            }
            RESULT = new If(new Sif(a, ins1), c, ins2);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // IF ::= tIf EXP tThen INSTRUCCION ELSEIFS 
            {
              If RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Sif> c = (ArrayList<Sif>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            ArrayList<Instruccion> ins;
            if(b instanceof BloqueInstrucciones) {
                ins = ((BloqueInstrucciones)b).instrucciones;
            } else {
                ins = new ArrayList<>();
                ins.add(b);
            }
            RESULT = new If(new Sif(a, ins), c, new ArrayList<>());
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IF ::= tIf EXP tThen INSTRUCCION 
            {
              If RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            ArrayList<Instruccion> ins;
            if(b instanceof BloqueInstrucciones) {
                ins = ((BloqueInstrucciones)b).instrucciones;
            } else {
                ins = new ArrayList<>();
                ins.add(b);
            }
            RESULT = new If(new Sif(a, ins), new ArrayList<>(), new ArrayList<>());
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXIT ::= tExit tPuntocoma 
            {
              Exit RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new Exit(parser.u(aright, aleft));
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXIT",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CONTINUE ::= tContinue tPuntocoma 
            {
              Continue RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new Continue(parser.u(aright, aleft));
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTINUE",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // BREAK ::= tBreak tPuntocoma 
            {
              Break RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new Break(parser.u(aright, aleft));
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BREAK",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // WITH ::= tWith ACCESO tDo INSTRUCCIONES tEnd tPuntocoma 
            {
              With RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Acceso a = (Acceso)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Instruccion> b = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
            RESULT = new With(a, b);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WITH",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ASIGNACION ::= ACCESO tAsignacion EXP tPuntocoma 
            {
              Asignacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Acceso a = (Acceso)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new Asignacion(a, b);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // INSTRUCCION ::= error tPuntocoma 
            {
              Instruccion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INSTRUCCION ::= tFree tIpar ACCESO tDpar tPuntocoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Acceso b = (Acceso)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    RESULT = new NFree(b);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INSTRUCCION ::= LLAMADA tPuntocoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Elemento a = (Elemento)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new InstruccionExpresion(a);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INSTRUCCION ::= READ 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Read a = (Read)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = a;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INSTRUCCION ::= WRITELN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Writeln a = (Writeln)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = a;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // INSTRUCCION ::= WRITE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Write a = (Write)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = a;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INSTRUCCION ::= FOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		For a = (For)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = a;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // INSTRUCCION ::= REPEAT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Repeat a = (Repeat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = a;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // INSTRUCCION ::= WHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		While a = (While)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = a;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INSTRUCCION ::= SWITCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Switch a = (Switch)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = a;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INSTRUCCION ::= IF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		If a = (If)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = a;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INSTRUCCION ::= EXIT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exit a = (Exit)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = a;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // INSTRUCCION ::= CONTINUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Continue a = (Continue)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = a;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // INSTRUCCION ::= BREAK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Break a = (Break)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = a;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // INSTRUCCION ::= WITH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		With a = (With)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = a;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Asignacion a = (Asignacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = a;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INSTRUCCION ::= BLOQUE_INSTRUCCIONES tPuntocoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BloqueInstrucciones a = (BloqueInstrucciones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = a;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INSTRUCCION ::= BLOQUE_INSTRUCCIONES 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BloqueInstrucciones a = (BloqueInstrucciones)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = a;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INSTRUCCIONES ::= INSTRUCCION 
            {
              ArrayList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    ArrayList<Instruccion> ins = new ArrayList<>();
                    if(a != null) {
                        ins.add(a);
                    }
                    RESULT = ins;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              ArrayList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Instruccion> a = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(b != null) {
                        a.add(b);
                    }
                    RESULT = a;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BLOQUE_INSTRUCCIONES ::= tBegin INSTRUCCIONES tEnd 
            {
              BloqueInstrucciones RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Instruccion> a = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                            RESULT = new BloqueInstrucciones(a);
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_INSTRUCCIONES",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PARAMETRO ::= tVar IDS tDospuntos TIPO_DEF 
            {
              PreParametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Id> a = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PreTipo b = (PreTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new PreParametro(true, a, b);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PARAMETRO ::= IDS tDospuntos TIPO_DEF 
            {
              PreParametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Id> a = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PreTipo b = (PreTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new PreParametro(false, a, b);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PARAMETROS ::= PARAMETRO 
            {
              ArrayList<PreParametro> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PreParametro a = (PreParametro)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    ArrayList<PreParametro> pp = new ArrayList<>();
                    pp.add(a);
                    RESULT = pp;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PARAMETROS ::= PARAMETROS tPuntocoma PARAMETRO 
            {
              ArrayList<PreParametro> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<PreParametro> a = (ArrayList<PreParametro>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PreParametro b = (PreParametro)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    a.add(b);
                    RESULT = a;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BLOQUE_PARAMETROS ::= 
            {
              ArrayList<PreParametro> RESULT =null;
		
                        RESULT = new ArrayList<>();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_PARAMETROS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BLOQUE_PARAMETROS ::= tIpar tDpar 
            {
              ArrayList<PreParametro> RESULT =null;
		
                        RESULT = new ArrayList<>();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_PARAMETROS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BLOQUE_PARAMETROS ::= tIpar PARAMETROS tDpar 
            {
              ArrayList<PreParametro> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<PreParametro> a = (ArrayList<PreParametro>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = a;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_PARAMETROS",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PROCEDURE ::= error tPuntocoma 
            {
              PreSubrutina RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PROCEDURE ::= tFunction ID BLOQUE_PARAMETROS tDospuntos TIPO_DEF tPuntocoma TYPE CONST VAR PROCEDIMIENTOS BLOQUE_INSTRUCCIONES tPuntocoma 
            {
              PreSubrutina RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Id a = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		ArrayList<PreParametro> b = (ArrayList<PreParametro>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		PreTipo c = (PreTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ArrayList<DeclaracionTipo> d = (ArrayList<DeclaracionTipo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<DeclaracionConstantes> e = (ArrayList<DeclaracionConstantes>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<DeclaracionVariables> f = (ArrayList<DeclaracionVariables>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<PreSubrutina> g = (ArrayList<PreSubrutina>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BloqueInstrucciones h = (BloqueInstrucciones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new PreFunction(a, b, c, d, e, f, g, h.instrucciones);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PROCEDURE ::= tProcedure ID BLOQUE_PARAMETROS tPuntocoma TYPE CONST VAR PROCEDIMIENTOS BLOQUE_INSTRUCCIONES tPuntocoma 
            {
              PreSubrutina RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Id a = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ArrayList<PreParametro> b = (ArrayList<PreParametro>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ArrayList<DeclaracionTipo> c = (ArrayList<DeclaracionTipo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<DeclaracionConstantes> d = (ArrayList<DeclaracionConstantes>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<DeclaracionVariables> e = (ArrayList<DeclaracionVariables>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<PreSubrutina> f = (ArrayList<PreSubrutina>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BloqueInstrucciones g = (BloqueInstrucciones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new PreProcedure(a, b, c, d, e, f, g.instrucciones);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDURE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PROCEDURES ::= PROCEDURE 
            {
              ArrayList<PreSubrutina> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PreSubrutina a = (PreSubrutina)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    ArrayList<PreSubrutina> ps = new ArrayList<>();
                    if(a != null) {
                        ps.add(a);
                    }
                    RESULT = ps;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDURES",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PROCEDURES ::= PROCEDURES PROCEDURE 
            {
              ArrayList<PreSubrutina> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<PreSubrutina> a = (ArrayList<PreSubrutina>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PreSubrutina b = (PreSubrutina)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(b != null) {
                        a.add(b);
                    }
                    RESULT = a;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDURES",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PROCEDIMIENTOS ::= 
            {
              ArrayList<PreSubrutina> RESULT =null;
		
                        RESULT = new ArrayList<>();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PROCEDIMIENTOS ::= PROCEDURES 
            {
              ArrayList<PreSubrutina> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<PreSubrutina> a = (ArrayList<PreSubrutina>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = a;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTOS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VARIABLE ::= IDS tDospuntos TIPO_DEF tIgual EXP tPuntocoma 
            {
              DeclaracionVariables RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ArrayList<Id> a = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		PreTipo b = (PreTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new DeclaracionVariables2(a, b, c);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VARIABLE ::= IDS tDospuntos TIPO_DEF tPuntocoma 
            {
              DeclaracionVariables RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<Id> a = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		PreTipo b = (PreTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new DeclaracionVariables1(a, b);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VARIABLES ::= VARIABLE 
            {
              ArrayList<DeclaracionVariables> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclaracionVariables a = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                ArrayList<DeclaracionVariables> dv = new ArrayList<>();
                dv.add(a);
                RESULT = dv;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VARIABLES ::= VARIABLES VARIABLE 
            {
              ArrayList<DeclaracionVariables> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<DeclaracionVariables> a = (ArrayList<DeclaracionVariables>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclaracionVariables b = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                a.add(b);
                RESULT = a;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VAR ::= 
            {
              ArrayList<DeclaracionVariables> RESULT =null;
		
            RESULT = new ArrayList<>();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VAR ::= tVar error tPuntocoma 
            {
              ArrayList<DeclaracionVariables> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VAR ::= tVar VARIABLES 
            {
              ArrayList<DeclaracionVariables> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<DeclaracionVariables> a = (ArrayList<DeclaracionVariables>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = a;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPO ::= IDS tDospuntos TIPO_DEF tPuntocoma 
            {
              DeclaracionTipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<Id> a = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		PreTipo b = (PreTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            b.declaracion = true;
            RESULT = new DeclaracionTipo1(a, b);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPO ::= IDS tIgual TIPO_DEF tPuntocoma 
            {
              DeclaracionTipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<Id> a = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		PreTipo b = (PreTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            b.declaracion = true;
            RESULT = new DeclaracionTipo1(a, b);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPOS ::= TIPO 
            {
              ArrayList<DeclaracionTipo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclaracionTipo a = (DeclaracionTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            ArrayList<DeclaracionTipo> dt = new ArrayList<>();
            dt.add(a);
            RESULT = dt;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPOS ::= TIPOS TIPO 
            {
              ArrayList<DeclaracionTipo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<DeclaracionTipo> a = (ArrayList<DeclaracionTipo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclaracionTipo b = (DeclaracionTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            a.add(b);
            RESULT = a;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TYPE ::= 
            {
              ArrayList<DeclaracionTipo> RESULT =null;
		
            RESULT = new ArrayList<>();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TYPE ::= tType error tPuntocoma 
            {
              ArrayList<DeclaracionTipo> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TYPE ::= tType TIPOS 
            {
              ArrayList<DeclaracionTipo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<DeclaracionTipo> a = (ArrayList<DeclaracionTipo>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = a;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONSTANTE ::= IDS tIgual TIPO_DEF tPuntocoma 
            {
              DeclaracionConstantes RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<Id> a = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		PreTipo b = (PreTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new DeclaracionConstantes2(a, b);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONSTANTE ::= IDS tDospuntos TIPO_DEF tIgual EXP tPuntocoma 
            {
              DeclaracionConstantes RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ArrayList<Id> a = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		PreTipo b = (PreTipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new DeclaracionConstantes1(a, b, c);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONSTANTES ::= CONSTANTE 
            {
              ArrayList<DeclaracionConstantes> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclaracionConstantes a = (DeclaracionConstantes)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    ArrayList<DeclaracionConstantes> dc = new ArrayList<>();
                    dc.add(a);
                    RESULT = dc;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTES",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONSTANTES ::= CONSTANTES CONSTANTE 
            {
              ArrayList<DeclaracionConstantes> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<DeclaracionConstantes> a = (ArrayList<DeclaracionConstantes>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclaracionConstantes b = (DeclaracionConstantes)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    a.add(b);
                    RESULT = a;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONSTANTES",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONST ::= 
            {
              ArrayList<DeclaracionConstantes> RESULT =null;
		
            RESULT = new ArrayList<>();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONST",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONST ::= tConst error tPuntocoma 
            {
              ArrayList<DeclaracionConstantes> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONST",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONST ::= tConst CONSTANTES 
            {
              ArrayList<DeclaracionConstantes> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<DeclaracionConstantes> a = (ArrayList<DeclaracionConstantes>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = a;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONST",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // USES ::= 
            {
              ArrayList<Id> RESULT =null;
		
            RESULT = new ArrayList<>();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("USES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // USES ::= tUses error tPuntocoma 
            {
              ArrayList<Id> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("USES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // USES ::= tUses IDS tPuntocoma 
            {
              ArrayList<Id> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Id> a = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = a;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("USES",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAMA ::= tProgram ID tPuntocoma USES TYPE CONST VAR PROCEDIMIENTOS BLOQUE_INSTRUCCIONES tPunto 
            {
              PreProgram RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Id a = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ArrayList<Id> b = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ArrayList<DeclaracionTipo> c = (ArrayList<DeclaracionTipo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<DeclaracionConstantes> d = (ArrayList<DeclaracionConstantes>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<DeclaracionVariables> e = (ArrayList<DeclaracionVariables>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<PreSubrutina> f = (ArrayList<PreSubrutina>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BloqueInstrucciones g = (BloqueInstrucciones)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new PreProgram(a, b, c, d, e, f, g.instrucciones);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAMAS ::= PROGRAMA 
            {
              ArrayList<PreProgram> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PreProgram a = (PreProgram)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                ArrayList<PreProgram> pp = new ArrayList<>();
                pp.add(a);
                RESULT = pp;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMAS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMAS ::= PROGRAMAS PROGRAMA 
            {
              ArrayList<PreProgram> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<PreProgram> a = (ArrayList<PreProgram>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		PreProgram b = (PreProgram)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                a.add(b);
                RESULT = a;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMAS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= PROGRAMAS tToken 
            {
              ArrayList<PreProgram> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<PreProgram> a = (ArrayList<PreProgram>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = a;
            parser.preprogramas = a;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<PreProgram> start_val = (ArrayList<PreProgram>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

