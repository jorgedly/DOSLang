/* The following code was generated by JFlex 1.6.1 */

package servidor.analizadores;

import java_cup.runtime.*;
import java.io.Reader;
import servidor.compilador.Constantes;
import servidor.compilador.Control;
import servidor.compilador.Ubicacion;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/servidor/analizadores/scanner.jflex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;
  public static final int MLC = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  2, 61, 62,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    18,  0, 11,  0,  0, 56,  0, 12, 45, 46, 53, 51, 49, 52,  9, 54, 
    60, 60, 60, 60, 10, 10, 10, 10,  8,  8, 43, 50, 57, 44, 58,  0, 
     0, 26, 29, 27, 32, 14, 21, 24, 28, 20,  6, 41, 15, 36, 22, 30, 
    34, 39, 25, 17, 23, 38, 35, 31, 42, 33, 37, 47, 13, 48, 55,  7, 
     0, 26, 29, 27, 32, 14, 21, 24, 28, 20,  6, 41, 15, 36, 22, 30, 
    34, 39, 25, 17, 23, 38, 35, 31, 42, 33, 37,  4,  0,  5,  0,  0, 
     0,  0,  0,  0,  0, 61,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 59,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\1\1\1\3\1\1\1\4\1\5"+
    "\1\6\1\7\2\3\1\1\1\3\1\1\17\3\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\2\32\1\33\2\1\2\34\1\1\1\0\3\35"+
    "\2\0\1\36\5\3\2\0\2\3\1\37\1\0\1\37"+
    "\5\3\1\0\5\3\1\40\13\3\1\41\1\42\1\0"+
    "\5\3\1\43\3\3\1\0\2\3\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\52\1\63\12\51\1\64"+
    "\1\65\1\66\1\0\1\3\1\67\1\3\1\0\2\3"+
    "\2\0\2\3\1\0\3\3\1\70\1\3\2\71\1\3"+
    "\1\72\1\73\12\3\1\74\1\3\1\0\6\3\1\0"+
    "\1\3\1\0\1\3\1\0\5\3\1\75\1\3\1\0"+
    "\2\3\1\52\1\0\1\76\1\77\1\100\1\101\1\102"+
    "\1\103\1\104\1\105\1\106\1\0\2\107\1\3\2\110"+
    "\1\3\2\0\2\3\1\0\1\3\1\111\1\0\2\3"+
    "\1\112\1\113\1\3\1\114\3\3\1\115\1\116\1\117"+
    "\5\3\2\120\1\121\1\0\2\3\1\0\3\3\2\122"+
    "\1\0\1\3\1\0\1\3\1\123\5\3\2\124\1\0"+
    "\1\3\1\0\2\3\2\0\2\3\1\0\1\3\2\125"+
    "\1\3\2\126\6\3\1\127\1\130\1\3\2\131\1\0"+
    "\1\3\2\132\2\133\1\3\2\134\2\135\5\3\2\136"+
    "\1\0\2\137\1\140\1\141\1\142\1\141\1\142\1\0"+
    "\1\3\1\0\4\3\1\143\1\144\1\3\1\145\1\0"+
    "\2\3\1\0\2\3\1\146\2\3\1\147\1\150\2\151"+
    "\1\0\4\3\1\152\1\0\1\3\1\153\2\154\1\155"+
    "\1\156\1\3\2\157\3\3\2\160\4\3\1\161\1\0"+
    "\2\3\1\0\1\3\2\162\1\163\2\164";

  private static int [] zzUnpackAction() {
    int [] result = new int[383];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\374\0\u017a"+
    "\0\u01b9\0\u01f8\0\u0237\0\u0276\0\374\0\374\0\u02b5\0\u02f4"+
    "\0\u0333\0\u0372\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec"+
    "\0\u052b\0\u056a\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4"+
    "\0\u0723\0\u0762\0\u07a1\0\374\0\u07e0\0\374\0\374\0\374"+
    "\0\374\0\374\0\374\0\374\0\374\0\374\0\374\0\374"+
    "\0\u081f\0\u085e\0\374\0\u089d\0\u08dc\0\374\0\374\0\u091b"+
    "\0\u095a\0\u0999\0\374\0\u09d8\0\u095a\0\u0a17\0\374\0\u0a56"+
    "\0\u017a\0\u0a95\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f"+
    "\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\374\0\u0d4a\0\u01b9\0\u0d89"+
    "\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42\0\u0f81"+
    "\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u1179"+
    "\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u12b4\0\u12f3\0\u01b9\0\u01b9"+
    "\0\u1332\0\u1371\0\u13b0\0\u13ef\0\u142e\0\u146d\0\u14ac\0\u14eb"+
    "\0\u152a\0\u1569\0\u15a8\0\u15e7\0\u1626\0\374\0\374\0\374"+
    "\0\374\0\374\0\374\0\u1665\0\374\0\374\0\374\0\374"+
    "\0\374\0\374\0\374\0\374\0\u16a4\0\374\0\u16e3\0\u1722"+
    "\0\u1761\0\u17a0\0\u17df\0\u181e\0\u185d\0\u189c\0\u18db\0\u191a"+
    "\0\374\0\u0a95\0\374\0\u1959\0\u1998\0\u01b9\0\u19d7\0\u1a16"+
    "\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e"+
    "\0\u1c4d\0\u1c8c\0\u01b9\0\u1ccb\0\374\0\u01b9\0\u1d0a\0\u01b9"+
    "\0\u01b9\0\u1d49\0\u1d88\0\u1dc7\0\u1e06\0\u1e45\0\u1e84\0\u1ec3"+
    "\0\u1f02\0\u1f41\0\u1f80\0\u01b9\0\u1fbf\0\u1ffe\0\u203d\0\u207c"+
    "\0\u20bb\0\u20fa\0\u2139\0\u2178\0\u21b7\0\u21f6\0\u2235\0\u2274"+
    "\0\u22b3\0\u22f2\0\u2331\0\u2370\0\u23af\0\u23ee\0\u01b9\0\u242d"+
    "\0\u246c\0\u24ab\0\u24ea\0\374\0\u2529\0\374\0\374\0\374"+
    "\0\374\0\374\0\374\0\374\0\374\0\374\0\u16e3\0\u2568"+
    "\0\u25a7\0\u25e6\0\374\0\u01b9\0\u2625\0\u2664\0\u26a3\0\u26e2"+
    "\0\u2721\0\u2760\0\u279f\0\u01b9\0\u27de\0\u281d\0\u285c\0\u01b9"+
    "\0\u01b9\0\u289b\0\u01b9\0\u28da\0\u2919\0\u2958\0\u01b9\0\u01b9"+
    "\0\u01b9\0\u2997\0\u29d6\0\u2a15\0\u2a54\0\u2a93\0\374\0\u01b9"+
    "\0\u2ad2\0\u2b11\0\u2b50\0\u2b8f\0\u2bce\0\u2c0d\0\u2c4c\0\u2c8b"+
    "\0\374\0\u01b9\0\u2cca\0\u2d09\0\u2d48\0\u2d87\0\u01b9\0\u2dc6"+
    "\0\u2e05\0\u2e44\0\u2e83\0\u2ec2\0\374\0\u01b9\0\u2f01\0\u2f40"+
    "\0\u2f7f\0\u2fbe\0\u2ffd\0\u303c\0\u307b\0\u30ba\0\u30f9\0\u3138"+
    "\0\u3177\0\374\0\u01b9\0\u31b6\0\374\0\u01b9\0\u31f5\0\u3234"+
    "\0\u3273\0\u32b2\0\u32f1\0\u3330\0\u01b9\0\u01b9\0\u336f\0\374"+
    "\0\u01b9\0\u33ae\0\u33ed\0\374\0\u01b9\0\374\0\u01b9\0\u342c"+
    "\0\u346b\0\u34aa\0\374\0\u01b9\0\u34e9\0\u3528\0\u3567\0\u35a6"+
    "\0\u35e5\0\374\0\u01b9\0\u3624\0\374\0\u01b9\0\u01b9\0\374"+
    "\0\374\0\u01b9\0\u01b9\0\u3663\0\u36a2\0\u36e1\0\u3720\0\u375f"+
    "\0\u379e\0\u37dd\0\u01b9\0\u01b9\0\u381c\0\u01b9\0\u385b\0\u389a"+
    "\0\u38d9\0\u3918\0\u3957\0\u3996\0\u01b9\0\u39d5\0\u3a14\0\u01b9"+
    "\0\374\0\374\0\u01b9\0\u3a53\0\u3a92\0\u3ad1\0\u3b10\0\u3b4f"+
    "\0\u01b9\0\u3b8e\0\u3bcd\0\u01b9\0\374\0\u01b9\0\u01b9\0\u01b9"+
    "\0\u3c0c\0\374\0\u01b9\0\u3c4b\0\u3c8a\0\u3cc9\0\374\0\u01b9"+
    "\0\u3d08\0\u3d47\0\u3d86\0\u3dc5\0\u01b9\0\u3e04\0\u3e43\0\u3e82"+
    "\0\u3ec1\0\u3f00\0\374\0\u01b9\0\u01b9\0\374\0\u01b9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[383];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\2\7\1\10\1\5\1\11\1\12\1\13"+
    "\1\14\1\13\1\15\1\16\1\5\1\17\1\20\1\21"+
    "\1\22\1\7\1\23\1\24\1\25\1\26\1\27\1\11"+
    "\1\30\1\31\1\32\1\11\1\33\1\34\1\35\1\36"+
    "\1\11\1\37\1\40\1\41\1\11\1\42\1\11\1\5"+
    "\2\11\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\13\1\0\1\7\1\64\1\65\1\66"+
    "\10\64\1\67\1\64\1\70\61\64\1\71\1\72\1\73"+
    "\11\71\1\5\1\74\57\71\2\75\2\76\1\77\62\76"+
    "\1\100\11\76\101\0\1\7\74\0\5\101\1\77\71\101"+
    "\6\0\3\11\1\0\1\11\3\0\2\11\1\0\1\11"+
    "\2\0\24\11\1\0\2\11\21\0\1\11\10\0\1\11"+
    "\7\0\2\11\1\0\1\11\2\0\24\11\1\0\2\11"+
    "\34\0\1\13\1\102\1\13\61\0\1\13\13\0\1\103"+
    "\73\0\3\11\1\0\1\11\3\0\1\11\1\104\1\0"+
    "\1\11\2\0\2\11\1\105\20\11\1\106\1\0\1\11"+
    "\1\107\21\0\1\11\10\0\3\11\1\0\1\11\3\0"+
    "\1\110\1\11\1\0\1\11\2\0\24\11\1\0\2\11"+
    "\21\0\1\11\25\0\2\111\2\0\1\112\55\0\3\11"+
    "\1\0\1\11\3\0\2\11\1\0\1\11\1\0\1\111"+
    "\1\113\2\11\1\114\20\11\1\0\2\11\21\0\1\11"+
    "\27\0\1\115\1\116\56\0\3\11\1\0\1\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\1\117\1\120\21\11"+
    "\1\0\2\11\21\0\1\11\10\0\3\11\1\0\1\11"+
    "\3\0\2\11\1\0\1\11\2\0\5\11\1\121\1\122"+
    "\3\11\1\123\7\11\1\124\1\11\1\0\2\11\21\0"+
    "\1\11\10\0\3\11\1\0\1\11\3\0\2\11\1\0"+
    "\1\11\1\0\1\125\1\126\5\11\1\127\3\11\1\130"+
    "\11\11\1\0\2\11\21\0\1\11\10\0\3\11\1\0"+
    "\1\11\3\0\2\11\1\0\1\11\2\0\5\11\1\131"+
    "\2\11\1\132\1\11\1\133\2\11\1\134\6\11\1\0"+
    "\2\11\21\0\1\11\10\0\3\11\1\0\1\11\3\0"+
    "\1\135\1\11\1\0\1\11\2\0\12\11\1\136\11\11"+
    "\1\0\2\11\21\0\1\11\10\0\3\11\1\0\1\11"+
    "\3\0\2\11\1\0\1\11\2\0\2\11\1\137\2\11"+
    "\1\140\16\11\1\0\2\11\21\0\1\11\10\0\3\11"+
    "\1\0\1\11\3\0\2\11\1\0\1\11\2\0\6\11"+
    "\1\141\1\11\1\142\1\11\1\143\11\11\1\0\2\11"+
    "\21\0\1\11\10\0\3\11\1\0\1\11\3\0\1\144"+
    "\1\11\1\0\1\11\2\0\5\11\1\145\4\11\1\146"+
    "\11\11\1\0\2\11\21\0\1\11\10\0\3\11\1\0"+
    "\1\11\3\0\2\11\1\0\1\11\2\0\1\11\1\147"+
    "\3\11\1\150\16\11\1\0\2\11\21\0\1\11\10\0"+
    "\3\11\1\0\1\11\3\0\2\11\1\0\1\11\1\0"+
    "\1\151\1\152\4\11\1\153\2\11\1\154\1\11\1\155"+
    "\11\11\1\0\2\11\21\0\1\11\10\0\3\11\1\0"+
    "\1\11\3\0\1\156\1\11\1\0\1\11\2\0\12\11"+
    "\1\157\11\11\1\0\2\11\21\0\1\11\10\0\3\11"+
    "\1\0\1\11\3\0\2\11\1\0\1\11\2\0\5\11"+
    "\1\160\16\11\1\0\2\11\21\0\1\11\10\0\3\11"+
    "\1\0\1\11\3\0\2\11\1\0\1\11\2\0\6\11"+
    "\1\161\15\11\1\0\2\11\21\0\1\11\10\0\3\11"+
    "\1\0\1\11\3\0\2\11\1\0\1\11\2\0\6\11"+
    "\1\162\15\11\1\0\2\11\21\0\1\11\10\0\3\11"+
    "\1\0\1\11\3\0\2\11\1\163\1\164\2\0\2\11"+
    "\1\165\21\11\1\0\2\11\21\0\1\11\56\0\1\166"+
    "\107\0\1\167\65\0\1\170\15\0\1\171\60\0\1\172"+
    "\22\0\1\64\2\0\10\64\1\0\1\64\1\0\61\64"+
    "\2\0\1\66\74\0\1\173\2\0\7\173\1\174\1\175"+
    "\1\176\1\177\7\173\1\200\1\201\1\202\1\173\1\203"+
    "\3\173\1\204\36\173\1\205\16\0\1\206\64\0\1\73"+
    "\74\0\1\173\2\0\7\173\1\207\1\210\1\211\1\212"+
    "\7\173\1\213\1\214\1\215\1\173\1\216\3\173\1\217"+
    "\36\173\1\220\2\0\2\76\1\0\62\76\1\0\11\76"+
    "\56\0\1\221\30\0\1\222\1\0\1\222\61\0\1\222"+
    "\13\0\1\223\73\0\3\11\1\0\1\11\3\0\2\11"+
    "\1\224\1\225\2\0\24\11\1\0\2\11\21\0\1\11"+
    "\10\0\3\11\1\0\1\11\3\0\2\11\1\0\1\11"+
    "\2\0\14\11\1\226\7\11\1\0\2\11\21\0\1\11"+
    "\10\0\3\11\1\0\1\11\3\0\2\11\1\0\1\11"+
    "\2\0\22\11\1\227\1\11\1\0\2\11\21\0\1\11"+
    "\10\0\3\11\1\0\1\11\3\0\2\11\1\0\1\11"+
    "\1\0\1\230\1\231\23\11\1\0\2\11\21\0\1\11"+
    "\10\0\3\11\1\0\1\11\3\0\2\11\1\0\1\11"+
    "\2\0\2\11\1\232\21\11\1\0\2\11\21\0\1\11"+
    "\47\0\1\233\62\0\1\234\53\0\3\11\1\0\1\11"+
    "\3\0\2\11\1\0\1\11\2\0\21\11\1\235\2\11"+
    "\1\0\2\11\21\0\1\11\10\0\3\11\1\0\1\11"+
    "\3\0\2\11\1\0\1\11\2\0\5\11\1\236\16\11"+
    "\1\0\2\11\21\0\1\11\31\0\1\237\55\0\3\11"+
    "\1\0\1\11\3\0\2\11\1\0\1\11\2\0\3\11"+
    "\1\240\20\11\1\0\2\11\21\0\1\11\10\0\3\11"+
    "\1\0\1\11\3\0\1\241\1\11\1\0\1\11\2\0"+
    "\24\11\1\0\2\11\21\0\1\11\10\0\3\11\1\0"+
    "\1\11\3\0\1\11\1\242\1\0\1\11\2\0\24\11"+
    "\1\0\2\11\21\0\1\11\10\0\3\11\1\0\1\11"+
    "\3\0\2\11\1\0\1\11\2\0\5\11\1\243\16\11"+
    "\1\0\2\11\21\0\1\11\10\0\3\11\1\0\1\11"+
    "\3\0\2\11\1\0\1\11\2\0\2\11\1\244\21\11"+
    "\1\0\2\11\21\0\1\11\21\0\1\245\65\0\3\11"+
    "\1\0\1\11\3\0\1\11\1\246\1\0\1\11\2\0"+
    "\24\11\1\0\2\11\21\0\1\11\10\0\3\11\1\0"+
    "\1\11\3\0\2\11\1\0\1\11\2\0\2\11\1\247"+
    "\21\11\1\0\2\11\21\0\1\11\10\0\3\11\1\0"+
    "\1\11\3\0\2\11\1\0\1\11\2\0\3\11\1\250"+
    "\1\11\1\251\16\11\1\0\2\11\21\0\1\11\10\0"+
    "\3\11\1\0\1\11\3\0\2\11\1\0\1\11\2\0"+
    "\22\11\1\252\1\11\1\0\2\11\21\0\1\11\10\0"+
    "\3\11\1\0\1\11\3\0\1\253\1\11\1\0\1\11"+
    "\2\0\24\11\1\0\2\11\21\0\1\11\10\0\3\11"+
    "\1\0\1\11\3\0\1\11\1\254\1\0\1\11\2\0"+
    "\7\11\1\255\12\11\1\256\1\11\1\0\2\11\21\0"+
    "\1\11\10\0\3\11\1\0\1\11\3\0\2\11\1\0"+
    "\1\11\2\0\16\11\1\257\5\11\1\0\2\11\21\0"+
    "\1\11\10\0\3\11\1\0\1\11\3\0\2\11\1\0"+
    "\1\11\2\0\6\11\1\260\1\261\6\11\1\262\5\11"+
    "\1\0\2\11\21\0\1\11\10\0\3\11\1\0\1\11"+
    "\3\0\2\11\1\0\1\11\2\0\22\11\1\263\1\11"+
    "\1\0\2\11\21\0\1\11\10\0\3\11\1\0\1\11"+
    "\3\0\2\11\1\0\1\11\2\0\14\11\1\264\7\11"+
    "\1\0\2\11\21\0\1\11\10\0\3\11\1\0\1\11"+
    "\3\0\2\11\1\0\1\11\2\0\5\11\1\265\16\11"+
    "\1\0\2\11\21\0\1\11\10\0\3\11\1\0\1\11"+
    "\3\0\2\11\1\266\1\267\2\0\24\11\1\0\2\11"+
    "\21\0\1\11\10\0\3\11\1\0\1\11\3\0\2\11"+
    "\1\0\1\11\2\0\6\11\1\270\15\11\1\0\2\11"+
    "\21\0\1\11\10\0\3\11\1\0\1\11\3\0\2\11"+
    "\1\0\1\11\2\0\2\11\1\271\21\11\1\0\2\11"+
    "\21\0\1\11\10\0\3\11\1\0\1\11\3\0\2\11"+
    "\1\0\1\11\2\0\4\11\1\272\17\11\1\0\2\11"+
    "\21\0\1\11\10\0\3\11\1\0\1\11\3\0\1\273"+
    "\1\11\1\0\1\11\2\0\24\11\1\0\2\11\21\0"+
    "\1\11\10\0\3\11\1\0\1\11\3\0\2\11\1\0"+
    "\1\11\2\0\12\11\1\274\11\11\1\0\2\11\21\0"+
    "\1\11\31\0\1\275\55\0\3\11\1\0\1\11\3\0"+
    "\2\11\1\0\1\11\2\0\3\11\1\276\20\11\1\0"+
    "\2\11\21\0\1\11\10\0\3\11\1\0\1\11\3\0"+
    "\2\11\1\0\1\11\1\0\1\277\1\300\23\11\1\0"+
    "\2\11\21\0\1\11\10\0\3\11\1\0\1\11\3\0"+
    "\2\11\1\0\1\11\1\0\1\301\1\302\23\11\1\0"+
    "\2\11\21\0\1\11\10\0\3\11\1\0\1\11\3\0"+
    "\2\11\1\0\1\11\2\0\5\11\1\303\16\11\1\0"+
    "\2\11\21\0\1\11\10\0\3\11\1\0\1\11\3\0"+
    "\2\11\1\0\1\11\2\0\1\11\1\304\22\11\1\0"+
    "\2\11\21\0\1\11\10\0\3\11\1\0\1\11\3\0"+
    "\2\11\1\0\1\11\2\0\13\11\1\305\10\11\1\0"+
    "\2\11\21\0\1\11\10\0\3\11\1\0\1\11\3\0"+
    "\2\11\1\0\1\11\2\0\12\11\1\306\11\11\1\0"+
    "\2\11\21\0\1\11\10\0\3\11\1\0\1\11\3\0"+
    "\2\11\1\0\1\11\2\0\5\11\1\307\16\11\1\0"+
    "\2\11\21\0\1\11\10\0\3\11\1\0\1\11\3\0"+
    "\1\11\1\310\1\0\1\11\2\0\24\11\1\0\2\11"+
    "\21\0\1\11\20\0\1\311\66\0\3\11\1\0\1\11"+
    "\3\0\1\312\1\11\1\0\1\11\2\0\24\11\1\0"+
    "\2\11\21\0\1\11\10\0\3\11\1\0\1\11\3\0"+
    "\2\11\1\0\1\11\2\0\3\11\1\313\20\11\1\0"+
    "\2\11\21\0\1\11\14\0\1\314\61\0\1\314\14\0"+
    "\1\174\61\0\1\174\14\0\1\315\1\0\1\316\57\0"+
    "\1\315\16\0\1\317\76\0\1\320\76\0\1\321\76\0"+
    "\1\322\76\0\1\323\76\0\1\324\76\0\1\325\76\0"+
    "\1\326\74\0\1\327\1\0\1\316\57\0\1\327\20\0"+
    "\1\330\66\0\3\11\1\0\1\11\3\0\1\331\1\11"+
    "\1\0\1\11\2\0\24\11\1\0\2\11\21\0\1\11"+
    "\10\0\3\11\1\0\1\11\3\0\2\11\1\0\1\11"+
    "\2\0\6\11\1\332\15\11\1\0\2\11\21\0\1\11"+
    "\31\0\1\333\55\0\3\11\1\0\1\11\3\0\2\11"+
    "\1\0\1\11\2\0\3\11\1\334\20\11\1\0\2\11"+
    "\21\0\1\11\10\0\3\11\1\0\1\11\3\0\2\11"+
    "\1\0\1\11\2\0\4\11\1\335\17\11\1\0\2\11"+
    "\21\0\1\11\20\0\1\336\103\0\2\337\60\0\3\11"+
    "\1\0\1\11\3\0\1\340\1\11\1\0\1\11\2\0"+
    "\24\11\1\0\2\11\21\0\1\11\10\0\3\11\1\0"+
    "\1\11\3\0\2\11\1\0\1\11\1\0\1\337\1\341"+
    "\23\11\1\0\2\11\21\0\1\11\20\0\1\342\66\0"+
    "\3\11\1\0\1\11\3\0\1\343\1\11\1\0\1\11"+
    "\2\0\24\11\1\0\2\11\21\0\1\11\10\0\3\11"+
    "\1\0\1\11\3\0\1\344\1\11\1\0\1\11\2\0"+
    "\24\11\1\0\2\11\21\0\1\11\10\0\3\11\1\0"+
    "\1\11\3\0\2\11\1\345\1\346\2\0\24\11\1\0"+
    "\2\11\21\0\1\11\10\0\3\11\1\0\1\11\3\0"+
    "\2\11\1\0\1\11\2\0\7\11\1\347\14\11\1\0"+
    "\2\11\21\0\1\11\10\0\3\11\1\0\1\11\3\0"+
    "\2\11\1\0\1\11\2\0\14\11\1\350\7\11\1\0"+
    "\2\11\21\0\1\11\10\0\3\11\1\0\1\11\3\0"+
    "\1\351\1\11\1\0\1\11\2\0\2\11\1\352\21\11"+
    "\1\0\2\11\21\0\1\11\10\0\3\11\1\0\1\11"+
    "\3\0\2\11\1\0\1\11\2\0\2\11\1\353\21\11"+
    "\1\0\2\11\21\0\1\11\10\0\3\11\1\0\1\11"+
    "\3\0\2\11\1\0\1\11\2\0\12\11\1\354\11\11"+
    "\1\0\2\11\21\0\1\11\10\0\3\11\1\0\1\11"+
    "\3\0\2\11\1\0\1\11\2\0\10\11\1\355\13\11"+
    "\1\0\2\11\21\0\1\11\10\0\3\11\1\0\1\11"+
    "\3\0\2\11\1\0\1\11\2\0\16\11\1\356\5\11"+
    "\1\0\2\11\21\0\1\11\10\0\3\11\1\0\1\11"+
    "\3\0\1\357\1\11\1\0\1\11\2\0\24\11\1\0"+
    "\2\11\21\0\1\11\10\0\3\11\1\0\1\11\3\0"+
    "\1\11\1\360\1\0\1\11\2\0\14\11\1\361\7\11"+
    "\1\0\2\11\21\0\1\11\10\0\3\11\1\0\1\11"+
    "\3\0\2\11\1\0\1\11\2\0\12\11\1\362\11\11"+
    "\1\0\2\11\21\0\1\11\10\0\3\11\1\0\1\11"+
    "\3\0\1\363\1\364\1\0\1\11\2\0\24\11\1\0"+
    "\2\11\21\0\1\11\10\0\3\11\1\0\1\11\3\0"+
    "\2\11\1\0\1\11\2\0\2\11\1\365\21\11\1\0"+
    "\2\11\21\0\1\11\10\0\3\11\1\0\1\11\3\0"+
    "\2\11\1\0\1\11\2\0\6\11\1\366\15\11\1\0"+
    "\2\11\21\0\1\11\20\0\1\367\66\0\3\11\1\0"+
    "\1\11\3\0\1\370\1\11\1\0\1\11\2\0\24\11"+
    "\1\0\2\11\21\0\1\11\10\0\3\11\1\0\1\11"+
    "\3\0\2\11\1\0\1\11\2\0\5\11\1\371\16\11"+
    "\1\0\2\11\21\0\1\11\10\0\3\11\1\0\1\11"+
    "\3\0\2\11\1\372\1\373\2\0\3\11\1\374\20\11"+
    "\1\0\2\11\21\0\1\11\10\0\3\11\1\0\1\11"+
    "\3\0\2\11\1\0\1\11\1\0\1\375\1\376\23\11"+
    "\1\0\2\11\21\0\1\11\10\0\3\11\1\0\1\11"+
    "\3\0\2\11\1\0\1\11\2\0\6\11\1\377\15\11"+
    "\1\0\2\11\21\0\1\11\10\0\3\11\1\0\1\11"+
    "\3\0\1\11\1\u0100\1\0\1\11\2\0\24\11\1\0"+
    "\2\11\21\0\1\11\36\0\1\u0101\50\0\3\11\1\0"+
    "\1\11\3\0\2\11\1\0\1\11\2\0\10\11\1\u0102"+
    "\13\11\1\0\2\11\21\0\1\11\31\0\1\u0103\55\0"+
    "\3\11\1\0\1\11\3\0\2\11\1\0\1\11\2\0"+
    "\3\11\1\u0104\20\11\1\0\2\11\21\0\1\11\21\0"+
    "\1\u0105\65\0\3\11\1\0\1\11\3\0\1\11\1\u0106"+
    "\1\0\1\11\2\0\24\11\1\0\2\11\21\0\1\11"+
    "\10\0\3\11\1\0\1\11\3\0\2\11\1\0\1\11"+
    "\2\0\14\11\1\u0107\7\11\1\0\2\11\21\0\1\11"+
    "\10\0\3\11\1\0\1\11\3\0\2\11\1\0\1\11"+
    "\2\0\6\11\1\u0108\15\11\1\0\2\11\21\0\1\11"+
    "\10\0\3\11\1\0\1\11\3\0\2\11\1\0\1\11"+
    "\2\0\2\11\1\u0109\21\11\1\0\2\11\21\0\1\11"+
    "\10\0\3\11\1\0\1\11\3\0\2\11\1\0\1\11"+
    "\2\0\4\11\1\u010a\2\11\1\u010b\14\11\1\0\2\11"+
    "\21\0\1\11\10\0\3\11\1\0\1\11\3\0\1\11"+
    "\1\u010c\1\0\1\11\2\0\24\11\1\0\2\11\21\0"+
    "\1\11\22\0\2\u010d\63\0\3\11\1\0\1\11\3\0"+
    "\2\11\1\u010d\1\u010e\2\0\24\11\1\0\2\11\21\0"+
    "\1\11\10\0\3\11\1\0\1\11\3\0\2\11\1\0"+
    "\1\11\1\0\1\u010f\1\u0110\23\11\1\0\2\11\21\0"+
    "\1\11\16\0\1\316\104\0\1\u0111\62\0\3\11\1\0"+
    "\1\11\3\0\2\11\1\0\1\11\1\u0111\1\0\24\11"+
    "\1\0\2\11\21\0\1\11\10\0\3\11\1\0\1\11"+
    "\3\0\1\11\1\u0112\1\0\1\11\2\0\24\11\1\0"+
    "\2\11\21\0\1\11\10\0\3\11\1\0\1\11\3\0"+
    "\2\11\1\0\1\11\2\0\3\11\1\u0113\20\11\1\0"+
    "\2\11\21\0\1\11\40\0\1\u0114\66\0\1\u0115\56\0"+
    "\3\11\1\0\1\11\3\0\2\11\1\0\1\11\2\0"+
    "\12\11\1\u0116\11\11\1\0\2\11\21\0\1\11\10\0"+
    "\3\11\1\0\1\11\3\0\2\11\1\0\1\11\2\0"+
    "\2\11\1\u0117\21\11\1\0\2\11\21\0\1\11\32\0"+
    "\1\u0118\54\0\3\11\1\0\1\11\3\0\2\11\1\0"+
    "\1\11\2\0\4\11\1\u0119\17\11\1\0\2\11\21\0"+
    "\1\11\20\0\1\u011a\66\0\3\11\1\0\1\11\3\0"+
    "\1\u011b\1\11\1\0\1\11\2\0\24\11\1\0\2\11"+
    "\21\0\1\11\10\0\3\11\1\0\1\11\3\0\2\11"+
    "\1\0\1\11\2\0\3\11\1\u011c\20\11\1\0\2\11"+
    "\21\0\1\11\10\0\3\11\1\0\1\11\3\0\2\11"+
    "\1\0\1\11\2\0\24\11\1\u011d\1\u011e\1\11\21\0"+
    "\1\11\10\0\3\11\1\0\1\11\3\0\2\11\1\0"+
    "\1\11\2\0\13\11\1\u011f\10\11\1\0\2\11\21\0"+
    "\1\11\10\0\3\11\1\0\1\11\3\0\2\11\1\0"+
    "\1\11\2\0\6\11\1\u0120\15\11\1\0\2\11\21\0"+
    "\1\11\10\0\3\11\1\0\1\11\3\0\2\11\1\0"+
    "\1\11\2\0\16\11\1\u0121\5\11\1\0\2\11\21\0"+
    "\1\11\10\0\3\11\1\0\1\11\3\0\2\11\1\0"+
    "\1\11\2\0\5\11\1\u0122\16\11\1\0\2\11\21\0"+
    "\1\11\10\0\3\11\1\0\1\11\3\0\2\11\1\0"+
    "\1\11\2\0\6\11\1\u0123\15\11\1\0\2\11\21\0"+
    "\1\11\10\0\3\11\1\0\1\11\3\0\2\11\1\0"+
    "\1\11\2\0\6\11\1\u0124\15\11\1\0\2\11\21\0"+
    "\1\11\10\0\3\11\1\0\1\11\3\0\2\11\1\0"+
    "\1\11\2\0\14\11\1\u0125\7\11\1\0\2\11\21\0"+
    "\1\11\10\0\3\11\1\0\1\11\3\0\2\11\1\0"+
    "\1\11\2\0\15\11\1\u0126\6\11\1\0\2\11\21\0"+
    "\1\11\10\0\3\11\1\0\1\11\3\0\2\11\1\0"+
    "\1\11\2\0\6\11\1\u0127\15\11\1\0\2\11\21\0"+
    "\1\11\31\0\1\u0128\55\0\3\11\1\0\1\11\3\0"+
    "\2\11\1\0\1\11\2\0\3\11\1\u0129\20\11\1\0"+
    "\2\11\21\0\1\11\10\0\3\11\1\0\1\11\3\0"+
    "\2\11\1\0\1\11\1\0\1\u012a\1\u012b\23\11\1\0"+
    "\2\11\21\0\1\11\30\0\1\u012c\56\0\3\11\1\0"+
    "\1\11\3\0\2\11\1\0\1\11\2\0\2\11\1\u012d"+
    "\21\11\1\0\2\11\21\0\1\11\10\0\3\11\1\0"+
    "\1\11\3\0\2\11\1\0\1\11\2\0\24\11\1\u012e"+
    "\1\u012f\1\11\21\0\1\11\10\0\3\11\1\0\1\11"+
    "\3\0\1\u0130\1\11\1\0\1\11\2\0\24\11\1\0"+
    "\2\11\21\0\1\11\20\0\1\u0131\66\0\3\11\1\0"+
    "\1\11\3\0\1\u0132\1\11\1\0\1\11\2\0\24\11"+
    "\1\0\2\11\21\0\1\11\20\0\1\u0133\66\0\3\11"+
    "\1\0\1\11\3\0\1\u0134\1\11\1\0\1\11\2\0"+
    "\24\11\1\0\2\11\21\0\1\11\10\0\3\11\1\0"+
    "\1\11\3\0\2\11\1\0\1\11\2\0\22\11\1\u0135"+
    "\1\11\1\0\2\11\21\0\1\11\10\0\3\11\1\0"+
    "\1\11\3\0\2\11\1\0\1\11\2\0\3\11\1\u0136"+
    "\20\11\1\0\2\11\21\0\1\11\10\0\3\11\1\0"+
    "\1\11\3\0\2\11\1\0\1\11\2\0\5\11\1\u0137"+
    "\16\11\1\0\2\11\21\0\1\11\10\0\3\11\1\0"+
    "\1\11\3\0\1\u0138\1\11\1\0\1\11\2\0\24\11"+
    "\1\0\2\11\21\0\1\11\10\0\3\11\1\0\1\11"+
    "\3\0\2\11\1\0\1\11\2\0\12\11\1\u0139\11\11"+
    "\1\0\2\11\21\0\1\11\21\0\1\u013a\65\0\3\11"+
    "\1\0\1\11\3\0\1\11\1\u013b\1\0\1\11\2\0"+
    "\24\11\1\0\2\11\21\0\1\11\25\0\2\u013c\60\0"+
    "\3\11\1\0\1\11\3\0\2\11\1\u013d\1\u013e\2\0"+
    "\24\11\1\0\2\11\21\0\1\11\10\0\3\11\1\0"+
    "\1\11\3\0\2\11\1\0\1\11\2\0\10\11\1\u013f"+
    "\13\11\1\0\2\11\21\0\1\11\27\0\1\u0140\101\0"+
    "\1\u0141\54\0\3\11\1\0\1\11\3\0\2\11\1\0"+
    "\1\11\2\0\1\11\1\u0142\22\11\1\0\2\11\21\0"+
    "\1\11\10\0\3\11\1\0\1\11\3\0\2\11\1\0"+
    "\1\11\2\0\4\11\1\u0143\17\11\1\0\2\11\21\0"+
    "\1\11\20\0\1\u0144\66\0\3\11\1\0\1\11\3\0"+
    "\1\u0145\1\11\1\0\1\11\2\0\24\11\1\0\2\11"+
    "\21\0\1\11\10\0\3\11\1\0\1\11\3\0\2\11"+
    "\1\0\1\11\1\0\1\u0146\1\u0147\23\11\1\0\2\11"+
    "\21\0\1\11\10\0\3\11\1\0\1\11\3\0\1\u0148"+
    "\1\11\1\0\1\11\2\0\24\11\1\0\2\11\21\0"+
    "\1\11\10\0\3\11\1\0\1\11\3\0\2\11\1\0"+
    "\1\11\2\0\5\11\1\u0149\16\11\1\0\2\11\21\0"+
    "\1\11\10\0\3\11\1\0\1\11\3\0\1\u014a\1\11"+
    "\1\0\1\11\2\0\24\11\1\0\2\11\21\0\1\11"+
    "\10\0\3\11\1\0\1\11\3\0\2\11\1\0\1\11"+
    "\2\0\14\11\1\u014b\7\11\1\0\2\11\21\0\1\11"+
    "\10\0\3\11\1\0\1\11\3\0\2\11\1\0\1\11"+
    "\2\0\3\11\1\u014c\20\11\1\0\2\11\21\0\1\11"+
    "\10\0\3\11\1\0\1\11\3\0\2\11\1\0\1\11"+
    "\2\0\7\11\1\u014d\14\11\1\0\2\11\21\0\1\11"+
    "\10\0\3\11\1\0\1\11\3\0\2\11\1\0\1\11"+
    "\2\0\3\11\1\u014e\20\11\1\0\2\11\21\0\1\11"+
    "\30\0\1\u014f\56\0\3\11\1\0\1\11\3\0\2\11"+
    "\1\0\1\11\2\0\2\11\1\u0150\21\11\1\0\2\11"+
    "\21\0\1\11\10\0\3\11\1\0\1\11\3\0\2\11"+
    "\1\0\1\11\2\0\6\11\1\u0151\15\11\1\0\2\11"+
    "\21\0\1\11\21\0\1\u0152\65\0\3\11\1\0\1\11"+
    "\3\0\1\11\1\u0153\1\0\1\11\2\0\24\11\1\0"+
    "\2\11\21\0\1\11\10\0\3\11\1\0\1\11\3\0"+
    "\1\11\1\u0154\1\0\1\11\2\0\24\11\1\0\2\11"+
    "\21\0\1\11\10\0\3\11\1\0\1\11\3\0\2\11"+
    "\1\0\1\11\2\0\12\11\1\u0155\11\11\1\0\2\11"+
    "\21\0\1\11\10\0\3\11\1\0\1\11\3\0\2\11"+
    "\1\0\1\11\2\0\6\11\1\u0156\15\11\1\0\2\11"+
    "\21\0\1\11\10\0\3\11\1\0\1\11\3\0\2\11"+
    "\1\0\1\11\2\0\14\11\1\u0157\7\11\1\0\2\11"+
    "\21\0\1\11\10\0\3\11\1\0\1\11\3\0\2\11"+
    "\1\0\1\11\2\0\7\11\1\u0158\14\11\1\0\2\11"+
    "\21\0\1\11\27\0\1\u0159\102\0\1\u015a\53\0\3\11"+
    "\1\0\1\11\3\0\2\11\1\0\1\11\2\0\5\11"+
    "\1\u015b\16\11\1\0\2\11\21\0\1\11\40\0\1\u015c"+
    "\46\0\3\11\1\0\1\11\3\0\2\11\1\0\1\11"+
    "\2\0\12\11\1\u015d\11\11\1\0\2\11\21\0\1\11"+
    "\10\0\3\11\1\0\1\11\3\0\2\11\1\0\1\11"+
    "\2\0\5\11\1\u015e\16\11\1\0\2\11\21\0\1\11"+
    "\10\0\3\11\1\0\1\11\3\0\2\11\1\0\1\11"+
    "\2\0\6\11\1\u015f\15\11\1\0\2\11\21\0\1\11"+
    "\10\0\3\11\1\0\1\11\3\0\2\11\1\0\1\11"+
    "\2\0\5\11\1\u0160\16\11\1\0\2\11\21\0\1\11"+
    "\10\0\3\11\1\0\1\11\3\0\1\u0161\1\11\1\0"+
    "\1\11\2\0\24\11\1\0\2\11\21\0\1\11\50\0"+
    "\1\u0162\36\0\3\11\1\0\1\11\3\0\2\11\1\0"+
    "\1\11\2\0\22\11\1\u0163\1\11\1\0\2\11\21\0"+
    "\1\11\10\0\3\11\1\0\1\11\3\0\2\11\1\0"+
    "\1\11\2\0\2\11\1\u0164\21\11\1\0\2\11\21\0"+
    "\1\11\30\0\1\u0165\56\0\3\11\1\0\1\11\3\0"+
    "\2\11\1\0\1\11\2\0\2\11\1\u0166\21\11\1\0"+
    "\2\11\21\0\1\11\10\0\3\11\1\0\1\11\3\0"+
    "\2\11\1\0\1\11\2\0\3\11\1\u0167\20\11\1\0"+
    "\2\11\21\0\1\11\10\0\3\11\1\0\1\11\3\0"+
    "\2\11\1\0\1\11\2\0\20\11\1\u0168\3\11\1\0"+
    "\2\11\21\0\1\11\10\0\3\11\1\0\1\11\3\0"+
    "\2\11\1\0\1\11\2\0\22\11\1\u0169\1\11\1\0"+
    "\2\11\21\0\1\11\30\0\1\u016a\56\0\3\11\1\0"+
    "\1\11\3\0\2\11\1\0\1\11\2\0\2\11\1\u016b"+
    "\21\11\1\0\2\11\21\0\1\11\10\0\3\11\1\0"+
    "\1\11\3\0\2\11\1\0\1\11\2\0\7\11\1\u016c"+
    "\14\11\1\0\2\11\21\0\1\11\10\0\3\11\1\0"+
    "\1\11\3\0\2\11\1\0\1\11\2\0\5\11\1\u016d"+
    "\16\11\1\0\2\11\21\0\1\11\10\0\3\11\1\0"+
    "\1\11\3\0\2\11\1\0\1\11\2\0\7\11\1\u016e"+
    "\14\11\1\0\2\11\21\0\1\11\20\0\1\u016f\66\0"+
    "\3\11\1\0\1\11\3\0\1\u0170\1\11\1\0\1\11"+
    "\2\0\24\11\1\0\2\11\21\0\1\11\10\0\3\11"+
    "\1\0\1\11\3\0\2\11\1\0\1\11\2\0\5\11"+
    "\1\u0171\16\11\1\0\2\11\21\0\1\11\10\0\3\11"+
    "\1\0\1\11\3\0\2\11\1\0\1\11\2\0\6\11"+
    "\1\u0172\15\11\1\0\2\11\21\0\1\11\10\0\3\11"+
    "\1\0\1\11\3\0\2\11\1\0\1\11\2\0\5\11"+
    "\1\u0173\16\11\1\0\2\11\21\0\1\11\10\0\3\11"+
    "\1\0\1\11\3\0\2\11\1\0\1\11\2\0\6\11"+
    "\1\u0174\15\11\1\0\2\11\21\0\1\11\10\0\3\11"+
    "\1\0\1\11\3\0\1\u0175\1\11\1\0\1\11\2\0"+
    "\24\11\1\0\2\11\21\0\1\11\10\0\3\11\1\0"+
    "\1\11\3\0\2\11\1\u0176\1\u0177\2\0\24\11\1\0"+
    "\2\11\21\0\1\11\10\0\3\11\1\0\1\11\3\0"+
    "\2\11\1\0\1\11\2\0\6\11\1\u0178\15\11\1\0"+
    "\2\11\21\0\1\11\10\0\3\11\1\0\1\11\3\0"+
    "\2\11\1\u0179\1\u017a\2\0\24\11\1\0\2\11\21\0"+
    "\1\11\20\0\1\u017b\66\0\3\11\1\0\1\11\3\0"+
    "\1\u017c\1\11\1\0\1\11\2\0\24\11\1\0\2\11"+
    "\21\0\1\11\10\0\3\11\1\0\1\11\3\0\2\11"+
    "\1\0\1\11\2\0\15\11\1\u017d\6\11\1\0\2\11"+
    "\21\0\1\11\20\0\1\u017e\66\0\3\11\1\0\1\11"+
    "\3\0\1\u017f\1\11\1\0\1\11\2\0\24\11\1\0"+
    "\2\11\21\0\1\11\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16191];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\1\11\5\1\2\11\25\1\1\11"+
    "\1\1\13\11\2\1\1\11\2\1\2\11\3\1\1\11"+
    "\1\1\1\0\1\1\1\11\1\1\2\0\6\1\2\0"+
    "\2\1\1\11\1\0\6\1\1\0\23\1\1\0\11\1"+
    "\1\0\2\1\6\11\1\1\10\11\1\1\1\11\12\1"+
    "\1\11\1\1\1\11\1\0\3\1\1\0\2\1\2\0"+
    "\2\1\1\0\5\1\1\11\20\1\1\0\6\1\1\0"+
    "\1\1\1\0\1\1\1\0\7\1\1\0\2\1\1\11"+
    "\1\0\11\11\1\0\3\1\1\11\2\1\2\0\2\1"+
    "\1\0\2\1\1\0\21\1\1\11\2\1\1\0\2\1"+
    "\1\0\3\1\1\11\1\1\1\0\1\1\1\0\7\1"+
    "\1\11\1\1\1\0\1\1\1\0\2\1\2\0\2\1"+
    "\1\0\1\1\1\11\2\1\1\11\12\1\1\11\1\1"+
    "\1\0\1\1\1\11\1\1\1\11\4\1\1\11\6\1"+
    "\1\11\1\1\1\0\1\11\2\1\2\11\2\1\1\0"+
    "\1\1\1\0\10\1\1\0\2\1\1\0\6\1\2\11"+
    "\1\1\1\0\5\1\1\0\2\1\1\11\4\1\1\11"+
    "\4\1\1\11\6\1\1\0\2\1\1\0\1\1\1\11"+
    "\2\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[383];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	StringBuilder string = new StringBuilder();
	public String archivo;
	public Scanner(Reader in, String archivo) {
        this.zzReader = in;
        this.archivo = archivo;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { Control.error(Constantes.LEXICO, new Ubicacion(yyline+1,yycolumn+1,archivo), "Caracter inválido: " + yytext());
            }
          case 117: break;
          case 2: 
            { /* ignore */
            }
          case 118: break;
          case 3: 
            { return new Symbol(Simbolos.nIdentificador, yycolumn, yyline, yytext());
            }
          case 119: break;
          case 4: 
            { return new Symbol(Simbolos.nEntero, yycolumn, yyline, yytext());
            }
          case 120: break;
          case 5: 
            { return new Symbol(Simbolos.tPunto);
            }
          case 121: break;
          case 6: 
            { yybegin(STRING); string.setLength(0);
            }
          case 122: break;
          case 7: 
            { yybegin(CHARLITERAL);
            }
          case 123: break;
          case 8: 
            { return new Symbol(Simbolos.tDospuntos);
            }
          case 124: break;
          case 9: 
            { return new Symbol(Simbolos.tIgual);
            }
          case 125: break;
          case 10: 
            { return new Symbol(Simbolos.tIpar);
            }
          case 126: break;
          case 11: 
            { return new Symbol(Simbolos.tDpar);
            }
          case 127: break;
          case 12: 
            { return new Symbol(Simbolos.tIcor);
            }
          case 128: break;
          case 13: 
            { return new Symbol(Simbolos.tDcor);
            }
          case 129: break;
          case 14: 
            { return new Symbol(Simbolos.tComa);
            }
          case 130: break;
          case 15: 
            { return new Symbol(Simbolos.tPuntocoma);
            }
          case 131: break;
          case 16: 
            { return new Symbol(Simbolos.tSuma);
            }
          case 132: break;
          case 17: 
            { return new Symbol(Simbolos.tResta);
            }
          case 133: break;
          case 18: 
            { return new Symbol(Simbolos.tMultiplicacion);
            }
          case 134: break;
          case 19: 
            { return new Symbol(Simbolos.tDivision);
            }
          case 135: break;
          case 20: 
            { return new Symbol(Simbolos.tPotencia);
            }
          case 136: break;
          case 21: 
            { return new Symbol(Simbolos.tModulo);
            }
          case 137: break;
          case 22: 
            { return new Symbol(Simbolos.tMenor);
            }
          case 138: break;
          case 23: 
            { return new Symbol(Simbolos.tMayor);
            }
          case 139: break;
          case 24: 
            { return new Symbol(Simbolos.tToken);
            }
          case 140: break;
          case 25: 
            { string.append( yytext() );
            }
          case 141: break;
          case 26: 
            { Control.error(Constantes.LEXICO, new Ubicacion(yyline+1,yycolumn+1,archivo), "Literal cadena sin finalizar: " + yytext());
            }
          case 142: break;
          case 27: 
            { yybegin(YYINITIAL); return new Symbol(Simbolos.nCadena, yycolumn, yyline, string.toString());
            }
          case 143: break;
          case 28: 
            { Control.error(Constantes.LEXICO, new Ubicacion(yyline+1,yycolumn+1,archivo), "Literal caracter sin finalizar: " + yytext());
            }
          case 144: break;
          case 29: 
            { 
            }
          case 145: break;
          case 30: 
            { return new Symbol(Simbolos.tDosp);
            }
          case 146: break;
          case 31: 
            { return new Symbol(Simbolos.tIf, yycolumn, yyline, yytext());
            }
          case 147: break;
          case 32: 
            { return new Symbol(Simbolos.tTo, yycolumn, yyline, yytext());
            }
          case 148: break;
          case 33: 
            { return new Symbol(Simbolos.tOf, yycolumn, yyline, yytext());
            }
          case 149: break;
          case 34: 
            { return new Symbol(Simbolos.tOr, yycolumn, yyline, yytext());
            }
          case 150: break;
          case 35: 
            { return new Symbol(Simbolos.tDo, yycolumn, yyline, yytext());
            }
          case 151: break;
          case 36: 
            { return new Symbol(Simbolos.tAsignacion);
            }
          case 152: break;
          case 37: 
            { yybegin(MLC);
            }
          case 153: break;
          case 38: 
            { return new Symbol(Simbolos.tMenorigual);
            }
          case 154: break;
          case 39: 
            { return new Symbol(Simbolos.tDistinto);
            }
          case 155: break;
          case 40: 
            { return new Symbol(Simbolos.tMayorigual);
            }
          case 156: break;
          case 41: 
            { Control.error(Constantes.LEXICO, new Ubicacion(yyline+1,yycolumn+1,archivo), "Secuencia ilegal de escape: " + yytext());
            }
          case 157: break;
          case 42: 
            { char val = (char) Integer.parseInt(yytext().substring(1),8); string.append( val );
            }
          case 158: break;
          case 43: 
            { string.append( '\"' );
            }
          case 159: break;
          case 44: 
            { string.append( '\'' );
            }
          case 160: break;
          case 45: 
            { string.append( '\\' );
            }
          case 161: break;
          case 46: 
            { string.append( '\f' );
            }
          case 162: break;
          case 47: 
            { string.append( '\n' );
            }
          case 163: break;
          case 48: 
            { string.append( '\t' );
            }
          case 164: break;
          case 49: 
            { string.append( '\r' );
            }
          case 165: break;
          case 50: 
            { string.append( '\b' );
            }
          case 166: break;
          case 51: 
            { yybegin(YYINITIAL); return new Symbol(Simbolos.nCaracter, yycolumn, yyline, yytext().charAt(0));
            }
          case 167: break;
          case 52: 
            { yybegin(YYINITIAL);
            }
          case 168: break;
          case 53: 
            { return new Symbol(Simbolos.nDecimal, yycolumn, yyline, yytext());
            }
          case 169: break;
          case 54: 
            { return new Symbol(Simbolos.tTresp);
            }
          case 170: break;
          case 55: 
            { return new Symbol(Simbolos.tEnd, yycolumn, yyline, yytext());
            }
          case 171: break;
          case 56: 
            { return new Symbol(Simbolos.tFor, yycolumn, yyline, yytext());
            }
          case 172: break;
          case 57: 
            { return new Symbol(Simbolos.tNil, yycolumn, yyline, yytext());
            }
          case 173: break;
          case 58: 
            { return new Symbol(Simbolos.tNot, yycolumn, yyline, yytext());
            }
          case 174: break;
          case 59: 
            { return new Symbol(Simbolos.tNor, yycolumn, yyline, yytext());
            }
          case 175: break;
          case 60: 
            { return new Symbol(Simbolos.tAnd, yycolumn, yyline, yytext());
            }
          case 176: break;
          case 61: 
            { return new Symbol(Simbolos.tVar, yycolumn, yyline, yytext());
            }
          case 177: break;
          case 62: 
            { yybegin(YYINITIAL); int val = Integer.parseInt(yytext().substring(1,yylength()-1),8); return new Symbol(Simbolos.nCaracter, yycolumn, yyline, (char)val + "");
            }
          case 178: break;
          case 63: 
            { yybegin(YYINITIAL); return new Symbol(Simbolos.nCaracter, yycolumn, yyline, '\"');
            }
          case 179: break;
          case 64: 
            { yybegin(YYINITIAL); return new Symbol(Simbolos.nCaracter, yycolumn, yyline, '\'');
            }
          case 180: break;
          case 65: 
            { yybegin(YYINITIAL); return new Symbol(Simbolos.nCaracter, yycolumn, yyline, '\\');
            }
          case 181: break;
          case 66: 
            { yybegin(YYINITIAL); return new Symbol(Simbolos.nCaracter, yycolumn, yyline, '\f');
            }
          case 182: break;
          case 67: 
            { yybegin(YYINITIAL); return new Symbol(Simbolos.nCaracter, yycolumn, yyline, '\n');
            }
          case 183: break;
          case 68: 
            { yybegin(YYINITIAL); return new Symbol(Simbolos.nCaracter, yycolumn, yyline, '\t');
            }
          case 184: break;
          case 69: 
            { yybegin(YYINITIAL); return new Symbol(Simbolos.nCaracter, yycolumn, yyline, '\r');
            }
          case 185: break;
          case 70: 
            { yybegin(YYINITIAL); return new Symbol(Simbolos.nCaracter, yycolumn, yyline, '\b');
            }
          case 186: break;
          case 71: 
            { return new Symbol(Simbolos.tElse, yycolumn, yyline, yytext());
            }
          case 187: break;
          case 72: 
            { return new Symbol(Simbolos.tExit, yycolumn, yyline, yytext());
            }
          case 188: break;
          case 73: 
            { return new Symbol(Simbolos.tFree, yycolumn, yyline, yytext());
            }
          case 189: break;
          case 74: 
            { return new Symbol(Simbolos.tNand, yycolumn, yyline, yytext());
            }
          case 190: break;
          case 75: 
            { return new Symbol(Simbolos.tTrue, yycolumn, yyline, yytext());
            }
          case 191: break;
          case 76: 
            { return new Symbol(Simbolos.tThen, yycolumn, yyline, yytext());
            }
          case 192: break;
          case 77: 
            { return new Symbol(Simbolos.tType, yycolumn, yyline, yytext());
            }
          case 193: break;
          case 78: 
            { return new Symbol(Simbolos.tReal, yycolumn, yyline, yytext());
            }
          case 194: break;
          case 79: 
            { return new Symbol(Simbolos.tRead, yycolumn, yyline, yytext());
            }
          case 195: break;
          case 80: 
            { return new Symbol(Simbolos.tCase, yycolumn, yyline, yytext());
            }
          case 196: break;
          case 81: 
            { return new Symbol(Simbolos.tChar, yycolumn, yyline, yytext());
            }
          case 197: break;
          case 82: 
            { return new Symbol(Simbolos.tWith, yycolumn, yyline, yytext());
            }
          case 198: break;
          case 83: 
            { return new Symbol(Simbolos.tWord, yycolumn, yyline, yytext());
            }
          case 199: break;
          case 84: 
            { return new Symbol(Simbolos.tUses, yycolumn, yyline, yytext());
            }
          case 200: break;
          case 85: 
            { return new Symbol(Simbolos.tFalse, yycolumn, yyline, yytext());
            }
          case 201: break;
          case 86: 
            { return new Symbol(Simbolos.tTrunk, yycolumn, yyline, yytext());
            }
          case 202: break;
          case 87: 
            { return new Symbol(Simbolos.tRound, yycolumn, yyline, yytext());
            }
          case 203: break;
          case 88: 
            { return new Symbol(Simbolos.tArray, yycolumn, yyline, yytext());
            }
          case 204: break;
          case 89: 
            { return new Symbol(Simbolos.tConst, yycolumn, yyline, yytext());
            }
          case 205: break;
          case 90: 
            { return new Symbol(Simbolos.tBegin, yycolumn, yyline, yytext());
            }
          case 206: break;
          case 91: 
            { return new Symbol(Simbolos.tBreak, yycolumn, yyline, yytext());
            }
          case 207: break;
          case 92: 
            { return new Symbol(Simbolos.tWrite, yycolumn, yyline, yytext());
            }
          case 208: break;
          case 93: 
            { return new Symbol(Simbolos.tWhile, yycolumn, yyline, yytext());
            }
          case 209: break;
          case 94: 
            { return new Symbol(Simbolos.tUntil, yycolumn, yyline, yytext());
            }
          case 210: break;
          case 95: 
            { return new Symbol(Simbolos.tEquals, yycolumn, yyline, yytext());
            }
          case 211: break;
          case 96: 
            { return new Symbol(Simbolos.tLength, yycolumn, yyline, yytext());
            }
          case 212: break;
          case 97: 
            { return new Symbol(Simbolos.tSizeof, yycolumn, yyline, yytext());
            }
          case 213: break;
          case 98: 
            { return new Symbol(Simbolos.tString, yycolumn, yyline, yytext());
            }
          case 214: break;
          case 99: 
            { return new Symbol(Simbolos.tRecord, yycolumn, yyline, yytext());
            }
          case 215: break;
          case 100: 
            { return new Symbol(Simbolos.tRepeat, yycolumn, yyline, yytext());
            }
          case 216: break;
          case 101: 
            { return new Symbol(Simbolos.tCharat, yycolumn, yyline, yytext());
            }
          case 217: break;
          case 102: 
            { return new Symbol(Simbolos.tDownto, yycolumn, yyline, yytext());
            }
          case 218: break;
          case 103: 
            { return new Symbol(Simbolos.tMalloc, yycolumn, yyline, yytext());
            }
          case 219: break;
          case 104: 
            { return new Symbol(Simbolos.tElseif, yycolumn, yyline, yytext());
            }
          case 220: break;
          case 105: 
            { return new Symbol(Simbolos.tInteger, yycolumn, yyline, yytext());
            }
          case 221: break;
          case 106: 
            { return new Symbol(Simbolos.tReplace, yycolumn, yyline, yytext());
            }
          case 222: break;
          case 107: 
            { return new Symbol(Simbolos.tBoolean, yycolumn, yyline, yytext());
            }
          case 223: break;
          case 108: 
            { return new Symbol(Simbolos.tWriteln, yycolumn, yyline, yytext());
            }
          case 224: break;
          case 109: 
            { return new Symbol(Simbolos.tDefault, yycolumn, yyline, yytext());
            }
          case 225: break;
          case 110: 
            { return new Symbol(Simbolos.tProgram, yycolumn, yyline, yytext());
            }
          case 226: break;
          case 111: 
            { return new Symbol(Simbolos.tFunction, yycolumn, yyline, yytext());
            }
          case 227: break;
          case 112: 
            { return new Symbol(Simbolos.tContinue, yycolumn, yyline, yytext());
            }
          case 228: break;
          case 113: 
            { return new Symbol(Simbolos.tProcedure, yycolumn, yyline, yytext());
            }
          case 229: break;
          case 114: 
            { return new Symbol(Simbolos.tTolowercase, yycolumn, yyline, yytext());
            }
          case 230: break;
          case 115: 
            { return new Symbol(Simbolos.tTochararray, yycolumn, yyline, yytext());
            }
          case 231: break;
          case 116: 
            { return new Symbol(Simbolos.tTouppercase, yycolumn, yyline, yytext());
            }
          case 232: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
